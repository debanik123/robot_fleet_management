// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const HeaderWrapper = require('../../generated/std_msgs/std_msgs__msg__Header.js');
const StringWrapper = require('../../generated/std_msgs/std_msgs__msg__String.js');
const UInt8Wrapper = require('../../generated/std_msgs/std_msgs__msg__UInt8.js');
const GpgsaRefStruct = StructType({
  header: HeaderWrapper.refObjectType,
  message_id: primitiveTypes.string,
  auto_manual_mode: primitiveTypes.string,
  fix_mode: primitiveTypes.uint8,
  sv_ids: UInt8Wrapper.refObjectArrayType,
  pdop: primitiveTypes.float32,
  hdop: primitiveTypes.float32,
  vdop: primitiveTypes.float32,
});
const GpgsaRefArray = ArrayType(GpgsaRefStruct);
const GpgsaRefStructArray = StructType({
  data: GpgsaRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class GpgsaWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new GpgsaRefStruct(other._refObject.toObject());
      this._wrapperFields.header =  new HeaderWrapper(other._wrapperFields.header);
      this._message_idIntialized = true;
      this._wrapperFields.message_id =  new StringWrapper(other._wrapperFields.message_id);
      this._auto_manual_modeIntialized = true;
      this._wrapperFields.auto_manual_mode =  new StringWrapper(other._wrapperFields.auto_manual_mode);
      this._fix_modeIntialized = true;
      this._wrapperFields.sv_ids = UInt8Wrapper.createArray();
      this._wrapperFields.sv_ids.copy(other._wrapperFields.sv_ids);
      this._pdopIntialized = true;
      this._hdopIntialized = true;
      this._vdopIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new GpgsaRefStruct();
    this._wrapperFields.header = new HeaderWrapper();
    this._message_idIntialized = false;
    this._wrapperFields.message_id = new StringWrapper();
    this._auto_manual_modeIntialized = false;
    this._wrapperFields.auto_manual_mode = new StringWrapper();
    this._fix_modeIntialized = false;
    this._wrapperFields.sv_ids = UInt8Wrapper.createArray();
    this._pdopIntialized = false;
    this._hdopIntialized = false;
    this._vdopIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new GpgsaWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new GpgsaArrayWrapper;
  }
  static get ArrayType() {
    return GpgsaArrayWrapper;
  }
  static get refObjectArrayType() {
    return GpgsaRefStructArray
  }
  static get refObjectType() {
    return GpgsaRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._message_idIntialized) {
        throw new TypeError('Invalid argument: message_id in Gpgsa');
      }
      if (checkConsistency && !this._auto_manual_modeIntialized) {
        throw new TypeError('Invalid argument: auto_manual_mode in Gpgsa');
      }
      if (checkConsistency && !this._fix_modeIntialized) {
        throw new TypeError('Invalid argument: fix_mode in Gpgsa');
      }
      if (checkConsistency && !this._pdopIntialized) {
        throw new TypeError('Invalid argument: pdop in Gpgsa');
      }
      if (checkConsistency && !this._hdopIntialized) {
        throw new TypeError('Invalid argument: hdop in Gpgsa');
      }
      if (checkConsistency && !this._vdopIntialized) {
        throw new TypeError('Invalid argument: vdop in Gpgsa');
      }
    this._wrapperFields.header.freeze(own, checkConsistency);
    this._refObject.header = this._wrapperFields.header.refObject;
    if (own) {
      this._wrapperFields.message_id.freeze(own, checkConsistency);
    }
    this._refObject.message_id = this._wrapperFields.message_id.refObject;
    if (own) {
      this._wrapperFields.auto_manual_mode.freeze(own, checkConsistency);
    }
    this._refObject.auto_manual_mode = this._wrapperFields.auto_manual_mode.refObject;
    this._wrapperFields.sv_ids.freeze(own, checkConsistency);
    this._refObject.sv_ids = this._wrapperFields.sv_ids.refObject;
    if (own) {
      this._wrapperFields.sv_ids.fill(Uint8Array.from([]));
      this._wrapperFields.sv_ids.freeze(own, checkConsistency);
      this._refObject.sv_ids = this._wrapperFields.sv_ids.refObject;
    }
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._wrapperFields.header.copyRefObject(refObject.header);
    this._message_idIntialized = true;
    this._wrapperFields.message_id.data = refObject.message_id.data;
    this._auto_manual_modeIntialized = true;
    this._wrapperFields.auto_manual_mode.data = refObject.auto_manual_mode.data;
    this._fix_modeIntialized = true;
    this._refObject.fix_mode = refObject.fix_mode;
    this._wrapperFields.sv_ids.copyRefObject(refObject.sv_ids);
    this._pdopIntialized = true;
    this._refObject.pdop = refObject.pdop;
    this._hdopIntialized = true;
    this._refObject.hdop = refObject.hdop;
    this._vdopIntialized = true;
    this._refObject.vdop = refObject.vdop;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    HeaderWrapper.freeStruct(refObject.header);
    StringWrapper.freeStruct(refObject.message_id);
    StringWrapper.freeStruct(refObject.auto_manual_mode);
    if (refObject.sv_ids.size != 0) {
      UInt8Wrapper.ArrayType.freeArray(refObject.sv_ids);
      if (UInt8Wrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.sv_ids, UInt8Wrapper.refObjectArrayType, 'data');
      }
    }
  }
  static destoryRawROS(msg) {
    GpgsaWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'nmea_msgs', subFolder: 'msg', interfaceName: 'Gpgsa'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get header() {
    return this._wrapperFields.header;
  }
  set header(value) {
    if (value instanceof HeaderWrapper) {
      this._wrapperFields.header.copy(value);
    } else {
      this._wrapperFields.header.copy(new HeaderWrapper(value));
    }
  }
  get message_id() {
    if (!this._message_idIntialized) {
      return undefined;
    }
    return this._wrapperFields.message_id.data;
  }
  set message_id(value) {
    this._message_idIntialized = true;
    this._wrapperFields.message_id.data = value;
  }
  get auto_manual_mode() {
    if (!this._auto_manual_modeIntialized) {
      return undefined;
    }
    return this._wrapperFields.auto_manual_mode.data;
  }
  set auto_manual_mode(value) {
    this._auto_manual_modeIntialized = true;
    this._wrapperFields.auto_manual_mode.data = value;
  }
  get fix_mode() {
    if (!this._fix_modeIntialized) {
      return undefined;
    }
    return this._refObject.fix_mode;
  }
  set fix_mode(value) {
    this._fix_modeIntialized = true;
    this._refObject.fix_mode = value;
  }
  get sv_ids() {
    return this._wrapperFields['sv_ids'].data;
  }
  set sv_ids(value) {
    this._wrapperFields['sv_ids'].fill(value);
  }
  get pdop() {
    if (!this._pdopIntialized) {
      return undefined;
    }
    return this._refObject.pdop;
  }
  set pdop(value) {
    this._pdopIntialized = true;
    this._refObject.pdop = value;
  }
  get hdop() {
    if (!this._hdopIntialized) {
      return undefined;
    }
    return this._refObject.hdop;
  }
  set hdop(value) {
    this._hdopIntialized = true;
    this._refObject.hdop = value;
  }
  get vdop() {
    if (!this._vdopIntialized) {
      return undefined;
    }
    return this._refObject.vdop;
  }
  set vdop(value) {
    this._vdopIntialized = true;
    this._refObject.vdop = value;
  }
  copyRefObject(refObject) {
    this._refObject = new GpgsaRefStruct(refObject.toObject());
    this._wrapperFields.header.copyRefObject(this._refObject.header);
    this._message_idIntialized = true;
    this._wrapperFields.message_id.copyRefObject(this._refObject.message_id);
    this._auto_manual_modeIntialized = true;
    this._wrapperFields.auto_manual_mode.copyRefObject(this._refObject.auto_manual_mode);
    this._fix_modeIntialized = true;
    this._wrapperFields.sv_ids.copyRefObject(this._refObject.sv_ids);
    this._pdopIntialized = true;
    this._hdopIntialized = true;
    this._vdopIntialized = true;
  }
  copy(other) {
    this._refObject = new GpgsaRefStruct(other._refObject.toObject());
    this._wrapperFields.header.copy(other._wrapperFields.header);
    this._message_idIntialized = true;
    this._wrapperFields.message_id.copy(other._wrapperFields.message_id);
    this._auto_manual_modeIntialized = true;
    this._wrapperFields.auto_manual_mode.copy(other._wrapperFields.auto_manual_mode);
    this._fix_modeIntialized = true;
    this._wrapperFields.sv_ids.copy(other._wrapperFields.sv_ids);
    this._pdopIntialized = true;
    this._hdopIntialized = true;
    this._vdopIntialized = true;
  }
  static get classType() {
    return GpgsaWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"header","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"std_msgs","type":"Header","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"message_id","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"auto_manual_mode","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"fix_mode","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"sv_ids","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"pdop","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"hdop","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"vdop","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"nmea_msgs","type":"Gpgsa","stringUpperBound":null,"isPrimitiveType":false},"msgName":"Gpgsa"};
  }
  hasMember(name) {
    let memberNames = ["header","message_id","auto_manual_mode","fix_mode","sv_ids","pdop","hdop","vdop"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class GpgsaArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof GpgsaWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new GpgsaWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to GpgsaArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to GpgsaArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new GpgsaRefArray(size);
    this._refObject = new GpgsaRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new GpgsaWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof GpgsaArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "GpgsaArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      GpgsaWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return GpgsaWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return GpgsaArrayWrapper;
  }
}
module.exports = GpgsaWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "header",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "std_msgs",
        "type": "Header",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "message_id",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "auto_manual_mode",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "fix_mode",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "sv_ids",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "pdop",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "hdop",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "vdop",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "nmea_msgs",
    "type": "Gpgsa",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "Gpgsa"
}
*/
