// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const HeaderWrapper = require('../../generated/std_msgs/std_msgs__msg__Header.js');
const TransformWrapper = require('../../generated/geometry_msgs/geometry_msgs__msg__Transform.js');
const Int32Wrapper = require('../../generated/std_msgs/std_msgs__msg__Int32.js');
const Float32Wrapper = require('../../generated/std_msgs/std_msgs__msg__Float32.js');
const StringWrapper = require('../../generated/std_msgs/std_msgs__msg__String.js');
const MapGraphWrapper = require('../../generated/rtabmap_msgs/rtabmap_msgs__msg__MapGraph.js');
const InfoRefStruct = StructType({
  header: HeaderWrapper.refObjectType,
  ref_id: primitiveTypes.int32,
  loop_closure_id: primitiveTypes.int32,
  proximity_detection_id: primitiveTypes.int32,
  landmark_id: primitiveTypes.int32,
  loop_closure_transform: TransformWrapper.refObjectType,
  wm_state: Int32Wrapper.refObjectArrayType,
  posterior_keys: Int32Wrapper.refObjectArrayType,
  posterior_values: Float32Wrapper.refObjectArrayType,
  likelihood_keys: Int32Wrapper.refObjectArrayType,
  likelihood_values: Float32Wrapper.refObjectArrayType,
  raw_likelihood_keys: Int32Wrapper.refObjectArrayType,
  raw_likelihood_values: Float32Wrapper.refObjectArrayType,
  weights_keys: Int32Wrapper.refObjectArrayType,
  weights_values: Int32Wrapper.refObjectArrayType,
  labels_keys: Int32Wrapper.refObjectArrayType,
  labels_values: StringWrapper.refObjectArrayType,
  stats_keys: StringWrapper.refObjectArrayType,
  stats_values: Float32Wrapper.refObjectArrayType,
  local_path: Int32Wrapper.refObjectArrayType,
  current_goal_id: primitiveTypes.int32,
  odom_cache: MapGraphWrapper.refObjectType,
});
const InfoRefArray = ArrayType(InfoRefStruct);
const InfoRefStructArray = StructType({
  data: InfoRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class InfoWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    this._labels_valuesArray = [];
    this._stats_keysArray = [];
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new InfoRefStruct(other._refObject.toObject());
      this._wrapperFields.header =  new HeaderWrapper(other._wrapperFields.header);
      this._ref_idIntialized = true;
      this._loop_closure_idIntialized = true;
      this._proximity_detection_idIntialized = true;
      this._landmark_idIntialized = true;
      this._wrapperFields.loop_closure_transform =  new TransformWrapper(other._wrapperFields.loop_closure_transform);
      this._wrapperFields.wm_state = Int32Wrapper.createArray();
      this._wrapperFields.wm_state.copy(other._wrapperFields.wm_state);
      this._wrapperFields.posterior_keys = Int32Wrapper.createArray();
      this._wrapperFields.posterior_keys.copy(other._wrapperFields.posterior_keys);
      this._wrapperFields.posterior_values = Float32Wrapper.createArray();
      this._wrapperFields.posterior_values.copy(other._wrapperFields.posterior_values);
      this._wrapperFields.likelihood_keys = Int32Wrapper.createArray();
      this._wrapperFields.likelihood_keys.copy(other._wrapperFields.likelihood_keys);
      this._wrapperFields.likelihood_values = Float32Wrapper.createArray();
      this._wrapperFields.likelihood_values.copy(other._wrapperFields.likelihood_values);
      this._wrapperFields.raw_likelihood_keys = Int32Wrapper.createArray();
      this._wrapperFields.raw_likelihood_keys.copy(other._wrapperFields.raw_likelihood_keys);
      this._wrapperFields.raw_likelihood_values = Float32Wrapper.createArray();
      this._wrapperFields.raw_likelihood_values.copy(other._wrapperFields.raw_likelihood_values);
      this._wrapperFields.weights_keys = Int32Wrapper.createArray();
      this._wrapperFields.weights_keys.copy(other._wrapperFields.weights_keys);
      this._wrapperFields.weights_values = Int32Wrapper.createArray();
      this._wrapperFields.weights_values.copy(other._wrapperFields.weights_values);
      this._wrapperFields.labels_keys = Int32Wrapper.createArray();
      this._wrapperFields.labels_keys.copy(other._wrapperFields.labels_keys);
      this._wrapperFields.labels_values = StringWrapper.createArray();
      this._wrapperFields.labels_values.copy(other._wrapperFields.labels_values);
      this.labels_values = other.labels_values;
      this._wrapperFields.stats_keys = StringWrapper.createArray();
      this._wrapperFields.stats_keys.copy(other._wrapperFields.stats_keys);
      this.stats_keys = other.stats_keys;
      this._wrapperFields.stats_values = Float32Wrapper.createArray();
      this._wrapperFields.stats_values.copy(other._wrapperFields.stats_values);
      this._wrapperFields.local_path = Int32Wrapper.createArray();
      this._wrapperFields.local_path.copy(other._wrapperFields.local_path);
      this._current_goal_idIntialized = true;
      this._wrapperFields.odom_cache =  new MapGraphWrapper(other._wrapperFields.odom_cache);
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new InfoRefStruct();
    this._wrapperFields.header = new HeaderWrapper();
    this._ref_idIntialized = false;
    this._loop_closure_idIntialized = false;
    this._proximity_detection_idIntialized = false;
    this._landmark_idIntialized = false;
    this._wrapperFields.loop_closure_transform = new TransformWrapper();
    this._wrapperFields.wm_state = Int32Wrapper.createArray();
    this._wrapperFields.posterior_keys = Int32Wrapper.createArray();
    this._wrapperFields.posterior_values = Float32Wrapper.createArray();
    this._wrapperFields.likelihood_keys = Int32Wrapper.createArray();
    this._wrapperFields.likelihood_values = Float32Wrapper.createArray();
    this._wrapperFields.raw_likelihood_keys = Int32Wrapper.createArray();
    this._wrapperFields.raw_likelihood_values = Float32Wrapper.createArray();
    this._wrapperFields.weights_keys = Int32Wrapper.createArray();
    this._wrapperFields.weights_values = Int32Wrapper.createArray();
    this._wrapperFields.labels_keys = Int32Wrapper.createArray();
    this._wrapperFields.labels_values = StringWrapper.createArray();
    this._wrapperFields.stats_keys = StringWrapper.createArray();
    this._wrapperFields.stats_values = Float32Wrapper.createArray();
    this._wrapperFields.local_path = Int32Wrapper.createArray();
    this._current_goal_idIntialized = false;
    this._wrapperFields.odom_cache = new MapGraphWrapper();
  }
  static createFromRefObject(refObject) {
    let self = new InfoWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new InfoArrayWrapper;
  }
  static get ArrayType() {
    return InfoArrayWrapper;
  }
  static get refObjectArrayType() {
    return InfoRefStructArray
  }
  static get refObjectType() {
    return InfoRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._ref_idIntialized) {
        throw new TypeError('Invalid argument: ref_id in Info');
      }
      if (checkConsistency && !this._loop_closure_idIntialized) {
        throw new TypeError('Invalid argument: loop_closure_id in Info');
      }
      if (checkConsistency && !this._proximity_detection_idIntialized) {
        throw new TypeError('Invalid argument: proximity_detection_id in Info');
      }
      if (checkConsistency && !this._landmark_idIntialized) {
        throw new TypeError('Invalid argument: landmark_id in Info');
      }
      if (checkConsistency && !this._current_goal_idIntialized) {
        throw new TypeError('Invalid argument: current_goal_id in Info');
      }
    this._wrapperFields.header.freeze(own, checkConsistency);
    this._refObject.header = this._wrapperFields.header.refObject;
    this._wrapperFields.loop_closure_transform.freeze(own, checkConsistency);
    this._refObject.loop_closure_transform = this._wrapperFields.loop_closure_transform.refObject;
    this._wrapperFields.wm_state.freeze(own, checkConsistency);
    this._refObject.wm_state = this._wrapperFields.wm_state.refObject;
    if (own) {
      this._wrapperFields.wm_state.fill(Int32Array.from([]));
      this._wrapperFields.wm_state.freeze(own, checkConsistency);
      this._refObject.wm_state = this._wrapperFields.wm_state.refObject;
    }
    this._wrapperFields.posterior_keys.freeze(own, checkConsistency);
    this._refObject.posterior_keys = this._wrapperFields.posterior_keys.refObject;
    if (own) {
      this._wrapperFields.posterior_keys.fill(Int32Array.from([]));
      this._wrapperFields.posterior_keys.freeze(own, checkConsistency);
      this._refObject.posterior_keys = this._wrapperFields.posterior_keys.refObject;
    }
    this._wrapperFields.posterior_values.freeze(own, checkConsistency);
    this._refObject.posterior_values = this._wrapperFields.posterior_values.refObject;
    if (own) {
      this._wrapperFields.posterior_values.fill(Float32Array.from([]));
      this._wrapperFields.posterior_values.freeze(own, checkConsistency);
      this._refObject.posterior_values = this._wrapperFields.posterior_values.refObject;
    }
    this._wrapperFields.likelihood_keys.freeze(own, checkConsistency);
    this._refObject.likelihood_keys = this._wrapperFields.likelihood_keys.refObject;
    if (own) {
      this._wrapperFields.likelihood_keys.fill(Int32Array.from([]));
      this._wrapperFields.likelihood_keys.freeze(own, checkConsistency);
      this._refObject.likelihood_keys = this._wrapperFields.likelihood_keys.refObject;
    }
    this._wrapperFields.likelihood_values.freeze(own, checkConsistency);
    this._refObject.likelihood_values = this._wrapperFields.likelihood_values.refObject;
    if (own) {
      this._wrapperFields.likelihood_values.fill(Float32Array.from([]));
      this._wrapperFields.likelihood_values.freeze(own, checkConsistency);
      this._refObject.likelihood_values = this._wrapperFields.likelihood_values.refObject;
    }
    this._wrapperFields.raw_likelihood_keys.freeze(own, checkConsistency);
    this._refObject.raw_likelihood_keys = this._wrapperFields.raw_likelihood_keys.refObject;
    if (own) {
      this._wrapperFields.raw_likelihood_keys.fill(Int32Array.from([]));
      this._wrapperFields.raw_likelihood_keys.freeze(own, checkConsistency);
      this._refObject.raw_likelihood_keys = this._wrapperFields.raw_likelihood_keys.refObject;
    }
    this._wrapperFields.raw_likelihood_values.freeze(own, checkConsistency);
    this._refObject.raw_likelihood_values = this._wrapperFields.raw_likelihood_values.refObject;
    if (own) {
      this._wrapperFields.raw_likelihood_values.fill(Float32Array.from([]));
      this._wrapperFields.raw_likelihood_values.freeze(own, checkConsistency);
      this._refObject.raw_likelihood_values = this._wrapperFields.raw_likelihood_values.refObject;
    }
    this._wrapperFields.weights_keys.freeze(own, checkConsistency);
    this._refObject.weights_keys = this._wrapperFields.weights_keys.refObject;
    if (own) {
      this._wrapperFields.weights_keys.fill(Int32Array.from([]));
      this._wrapperFields.weights_keys.freeze(own, checkConsistency);
      this._refObject.weights_keys = this._wrapperFields.weights_keys.refObject;
    }
    this._wrapperFields.weights_values.freeze(own, checkConsistency);
    this._refObject.weights_values = this._wrapperFields.weights_values.refObject;
    if (own) {
      this._wrapperFields.weights_values.fill(Int32Array.from([]));
      this._wrapperFields.weights_values.freeze(own, checkConsistency);
      this._refObject.weights_values = this._wrapperFields.weights_values.refObject;
    }
    this._wrapperFields.labels_keys.freeze(own, checkConsistency);
    this._refObject.labels_keys = this._wrapperFields.labels_keys.refObject;
    if (own) {
      this._wrapperFields.labels_keys.fill(Int32Array.from([]));
      this._wrapperFields.labels_keys.freeze(own, checkConsistency);
      this._refObject.labels_keys = this._wrapperFields.labels_keys.refObject;
    }
    if (!own) {
      this._wrapperFields.labels_values.fill(this._labels_valuesArray);
      this._wrapperFields.labels_values.freeze(own, checkConsistency);
      this._refObject.labels_values = this._wrapperFields.labels_values.refObject;
    } else {
      this._wrapperFields.labels_values.fill([]);
      this._wrapperFields.labels_values.freeze(own, checkConsistency);
      this._refObject.labels_values = this._wrapperFields.labels_values.refObject;
    }
    if (!own) {
      this._wrapperFields.stats_keys.fill(this._stats_keysArray);
      this._wrapperFields.stats_keys.freeze(own, checkConsistency);
      this._refObject.stats_keys = this._wrapperFields.stats_keys.refObject;
    } else {
      this._wrapperFields.stats_keys.fill([]);
      this._wrapperFields.stats_keys.freeze(own, checkConsistency);
      this._refObject.stats_keys = this._wrapperFields.stats_keys.refObject;
    }
    this._wrapperFields.stats_values.freeze(own, checkConsistency);
    this._refObject.stats_values = this._wrapperFields.stats_values.refObject;
    if (own) {
      this._wrapperFields.stats_values.fill(Float32Array.from([]));
      this._wrapperFields.stats_values.freeze(own, checkConsistency);
      this._refObject.stats_values = this._wrapperFields.stats_values.refObject;
    }
    this._wrapperFields.local_path.freeze(own, checkConsistency);
    this._refObject.local_path = this._wrapperFields.local_path.refObject;
    if (own) {
      this._wrapperFields.local_path.fill(Int32Array.from([]));
      this._wrapperFields.local_path.freeze(own, checkConsistency);
      this._refObject.local_path = this._wrapperFields.local_path.refObject;
    }
    this._wrapperFields.odom_cache.freeze(own, checkConsistency);
    this._refObject.odom_cache = this._wrapperFields.odom_cache.refObject;
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._wrapperFields.header.copyRefObject(refObject.header);
    this._ref_idIntialized = true;
    this._refObject.ref_id = refObject.ref_id;
    this._loop_closure_idIntialized = true;
    this._refObject.loop_closure_id = refObject.loop_closure_id;
    this._proximity_detection_idIntialized = true;
    this._refObject.proximity_detection_id = refObject.proximity_detection_id;
    this._landmark_idIntialized = true;
    this._refObject.landmark_id = refObject.landmark_id;
    this._wrapperFields.loop_closure_transform.copyRefObject(refObject.loop_closure_transform);
    this._wrapperFields.wm_state.copyRefObject(refObject.wm_state);
    this._wrapperFields.posterior_keys.copyRefObject(refObject.posterior_keys);
    this._wrapperFields.posterior_values.copyRefObject(refObject.posterior_values);
    this._wrapperFields.likelihood_keys.copyRefObject(refObject.likelihood_keys);
    this._wrapperFields.likelihood_values.copyRefObject(refObject.likelihood_values);
    this._wrapperFields.raw_likelihood_keys.copyRefObject(refObject.raw_likelihood_keys);
    this._wrapperFields.raw_likelihood_values.copyRefObject(refObject.raw_likelihood_values);
    this._wrapperFields.weights_keys.copyRefObject(refObject.weights_keys);
    this._wrapperFields.weights_values.copyRefObject(refObject.weights_values);
    this._wrapperFields.labels_keys.copyRefObject(refObject.labels_keys);
    refObject.labels_values.data.length = refObject.labels_values.size;
    for (let index = 0; index < refObject.labels_values.size; index++) {
      this._labels_valuesArray[index] = refObject.labels_values.data[index].data;
    }
    refObject.stats_keys.data.length = refObject.stats_keys.size;
    for (let index = 0; index < refObject.stats_keys.size; index++) {
      this._stats_keysArray[index] = refObject.stats_keys.data[index].data;
    }
    this._wrapperFields.stats_values.copyRefObject(refObject.stats_values);
    this._wrapperFields.local_path.copyRefObject(refObject.local_path);
    this._current_goal_idIntialized = true;
    this._refObject.current_goal_id = refObject.current_goal_id;
    this._wrapperFields.odom_cache.copyRefObject(refObject.odom_cache);
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    HeaderWrapper.freeStruct(refObject.header);
    TransformWrapper.freeStruct(refObject.loop_closure_transform);
    if (refObject.wm_state.size != 0) {
      Int32Wrapper.ArrayType.freeArray(refObject.wm_state);
      if (Int32Wrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.wm_state, Int32Wrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.posterior_keys.size != 0) {
      Int32Wrapper.ArrayType.freeArray(refObject.posterior_keys);
      if (Int32Wrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.posterior_keys, Int32Wrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.posterior_values.size != 0) {
      Float32Wrapper.ArrayType.freeArray(refObject.posterior_values);
      if (Float32Wrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.posterior_values, Float32Wrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.likelihood_keys.size != 0) {
      Int32Wrapper.ArrayType.freeArray(refObject.likelihood_keys);
      if (Int32Wrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.likelihood_keys, Int32Wrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.likelihood_values.size != 0) {
      Float32Wrapper.ArrayType.freeArray(refObject.likelihood_values);
      if (Float32Wrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.likelihood_values, Float32Wrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.raw_likelihood_keys.size != 0) {
      Int32Wrapper.ArrayType.freeArray(refObject.raw_likelihood_keys);
      if (Int32Wrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.raw_likelihood_keys, Int32Wrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.raw_likelihood_values.size != 0) {
      Float32Wrapper.ArrayType.freeArray(refObject.raw_likelihood_values);
      if (Float32Wrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.raw_likelihood_values, Float32Wrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.weights_keys.size != 0) {
      Int32Wrapper.ArrayType.freeArray(refObject.weights_keys);
      if (Int32Wrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.weights_keys, Int32Wrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.weights_values.size != 0) {
      Int32Wrapper.ArrayType.freeArray(refObject.weights_values);
      if (Int32Wrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.weights_values, Int32Wrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.labels_keys.size != 0) {
      Int32Wrapper.ArrayType.freeArray(refObject.labels_keys);
      if (Int32Wrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.labels_keys, Int32Wrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.labels_values.size != 0) {
      StringWrapper.ArrayType.freeArray(refObject.labels_values);
      if (StringWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.labels_values, StringWrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.stats_keys.size != 0) {
      StringWrapper.ArrayType.freeArray(refObject.stats_keys);
      if (StringWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.stats_keys, StringWrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.stats_values.size != 0) {
      Float32Wrapper.ArrayType.freeArray(refObject.stats_values);
      if (Float32Wrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.stats_values, Float32Wrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.local_path.size != 0) {
      Int32Wrapper.ArrayType.freeArray(refObject.local_path);
      if (Int32Wrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.local_path, Int32Wrapper.refObjectArrayType, 'data');
      }
    }
    MapGraphWrapper.freeStruct(refObject.odom_cache);
  }
  static destoryRawROS(msg) {
    InfoWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'rtabmap_msgs', subFolder: 'msg', interfaceName: 'Info'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get header() {
    return this._wrapperFields.header;
  }
  set header(value) {
    if (value instanceof HeaderWrapper) {
      this._wrapperFields.header.copy(value);
    } else {
      this._wrapperFields.header.copy(new HeaderWrapper(value));
    }
  }
  get ref_id() {
    if (!this._ref_idIntialized) {
      return undefined;
    }
    return this._refObject.ref_id;
  }
  set ref_id(value) {
    this._ref_idIntialized = true;
    this._refObject.ref_id = value;
  }
  get loop_closure_id() {
    if (!this._loop_closure_idIntialized) {
      return undefined;
    }
    return this._refObject.loop_closure_id;
  }
  set loop_closure_id(value) {
    this._loop_closure_idIntialized = true;
    this._refObject.loop_closure_id = value;
  }
  get proximity_detection_id() {
    if (!this._proximity_detection_idIntialized) {
      return undefined;
    }
    return this._refObject.proximity_detection_id;
  }
  set proximity_detection_id(value) {
    this._proximity_detection_idIntialized = true;
    this._refObject.proximity_detection_id = value;
  }
  get landmark_id() {
    if (!this._landmark_idIntialized) {
      return undefined;
    }
    return this._refObject.landmark_id;
  }
  set landmark_id(value) {
    this._landmark_idIntialized = true;
    this._refObject.landmark_id = value;
  }
  get loop_closure_transform() {
    return this._wrapperFields.loop_closure_transform;
  }
  set loop_closure_transform(value) {
    if (value instanceof TransformWrapper) {
      this._wrapperFields.loop_closure_transform.copy(value);
    } else {
      this._wrapperFields.loop_closure_transform.copy(new TransformWrapper(value));
    }
  }
  get wm_state() {
    return this._wrapperFields['wm_state'].data;
  }
  set wm_state(value) {
    this._wrapperFields['wm_state'].fill(value);
  }
  get posterior_keys() {
    return this._wrapperFields['posterior_keys'].data;
  }
  set posterior_keys(value) {
    this._wrapperFields['posterior_keys'].fill(value);
  }
  get posterior_values() {
    return this._wrapperFields['posterior_values'].data;
  }
  set posterior_values(value) {
    this._wrapperFields['posterior_values'].fill(value);
  }
  get likelihood_keys() {
    return this._wrapperFields['likelihood_keys'].data;
  }
  set likelihood_keys(value) {
    this._wrapperFields['likelihood_keys'].fill(value);
  }
  get likelihood_values() {
    return this._wrapperFields['likelihood_values'].data;
  }
  set likelihood_values(value) {
    this._wrapperFields['likelihood_values'].fill(value);
  }
  get raw_likelihood_keys() {
    return this._wrapperFields['raw_likelihood_keys'].data;
  }
  set raw_likelihood_keys(value) {
    this._wrapperFields['raw_likelihood_keys'].fill(value);
  }
  get raw_likelihood_values() {
    return this._wrapperFields['raw_likelihood_values'].data;
  }
  set raw_likelihood_values(value) {
    this._wrapperFields['raw_likelihood_values'].fill(value);
  }
  get weights_keys() {
    return this._wrapperFields['weights_keys'].data;
  }
  set weights_keys(value) {
    this._wrapperFields['weights_keys'].fill(value);
  }
  get weights_values() {
    return this._wrapperFields['weights_values'].data;
  }
  set weights_values(value) {
    this._wrapperFields['weights_values'].fill(value);
  }
  get labels_keys() {
    return this._wrapperFields['labels_keys'].data;
  }
  set labels_keys(value) {
    this._wrapperFields['labels_keys'].fill(value);
  }
  get labels_values() {
    return this._labels_valuesArray;
  }
  set labels_values(value) {
    this._labels_valuesArray = value;
  }
  get stats_keys() {
    return this._stats_keysArray;
  }
  set stats_keys(value) {
    this._stats_keysArray = value;
  }
  get stats_values() {
    return this._wrapperFields['stats_values'].data;
  }
  set stats_values(value) {
    this._wrapperFields['stats_values'].fill(value);
  }
  get local_path() {
    return this._wrapperFields['local_path'].data;
  }
  set local_path(value) {
    this._wrapperFields['local_path'].fill(value);
  }
  get current_goal_id() {
    if (!this._current_goal_idIntialized) {
      return undefined;
    }
    return this._refObject.current_goal_id;
  }
  set current_goal_id(value) {
    this._current_goal_idIntialized = true;
    this._refObject.current_goal_id = value;
  }
  get odom_cache() {
    return this._wrapperFields.odom_cache;
  }
  set odom_cache(value) {
    if (value instanceof MapGraphWrapper) {
      this._wrapperFields.odom_cache.copy(value);
    } else {
      this._wrapperFields.odom_cache.copy(new MapGraphWrapper(value));
    }
  }
  copyRefObject(refObject) {
    this._refObject = new InfoRefStruct(refObject.toObject());
    this._wrapperFields.header.copyRefObject(this._refObject.header);
    this._ref_idIntialized = true;
    this._loop_closure_idIntialized = true;
    this._proximity_detection_idIntialized = true;
    this._landmark_idIntialized = true;
    this._wrapperFields.loop_closure_transform.copyRefObject(this._refObject.loop_closure_transform);
    this._wrapperFields.wm_state.copyRefObject(this._refObject.wm_state);
    this._wrapperFields.posterior_keys.copyRefObject(this._refObject.posterior_keys);
    this._wrapperFields.posterior_values.copyRefObject(this._refObject.posterior_values);
    this._wrapperFields.likelihood_keys.copyRefObject(this._refObject.likelihood_keys);
    this._wrapperFields.likelihood_values.copyRefObject(this._refObject.likelihood_values);
    this._wrapperFields.raw_likelihood_keys.copyRefObject(this._refObject.raw_likelihood_keys);
    this._wrapperFields.raw_likelihood_values.copyRefObject(this._refObject.raw_likelihood_values);
    this._wrapperFields.weights_keys.copyRefObject(this._refObject.weights_keys);
    this._wrapperFields.weights_values.copyRefObject(this._refObject.weights_values);
    this._wrapperFields.labels_keys.copyRefObject(this._refObject.labels_keys);
    refObject.labels_values.data.length = refObject.labels_values.size;
    for (let index = 0; index < refObject.labels_values.size; index++) {
      this._labels_valuesArray[index] = refObject.labels_values.data[index].data;
    }
    refObject.stats_keys.data.length = refObject.stats_keys.size;
    for (let index = 0; index < refObject.stats_keys.size; index++) {
      this._stats_keysArray[index] = refObject.stats_keys.data[index].data;
    }
    this._wrapperFields.stats_values.copyRefObject(this._refObject.stats_values);
    this._wrapperFields.local_path.copyRefObject(this._refObject.local_path);
    this._current_goal_idIntialized = true;
    this._wrapperFields.odom_cache.copyRefObject(this._refObject.odom_cache);
  }
  copy(other) {
    this._refObject = new InfoRefStruct(other._refObject.toObject());
    this._wrapperFields.header.copy(other._wrapperFields.header);
    this._ref_idIntialized = true;
    this._loop_closure_idIntialized = true;
    this._proximity_detection_idIntialized = true;
    this._landmark_idIntialized = true;
    this._wrapperFields.loop_closure_transform.copy(other._wrapperFields.loop_closure_transform);
    this._wrapperFields.wm_state.copy(other._wrapperFields.wm_state);
    this._wrapperFields.posterior_keys.copy(other._wrapperFields.posterior_keys);
    this._wrapperFields.posterior_values.copy(other._wrapperFields.posterior_values);
    this._wrapperFields.likelihood_keys.copy(other._wrapperFields.likelihood_keys);
    this._wrapperFields.likelihood_values.copy(other._wrapperFields.likelihood_values);
    this._wrapperFields.raw_likelihood_keys.copy(other._wrapperFields.raw_likelihood_keys);
    this._wrapperFields.raw_likelihood_values.copy(other._wrapperFields.raw_likelihood_values);
    this._wrapperFields.weights_keys.copy(other._wrapperFields.weights_keys);
    this._wrapperFields.weights_values.copy(other._wrapperFields.weights_values);
    this._wrapperFields.labels_keys.copy(other._wrapperFields.labels_keys);
    this._labels_valuesArray = other._labels_valuesArray.slice();
    this._stats_keysArray = other._stats_keysArray.slice();
    this._wrapperFields.stats_values.copy(other._wrapperFields.stats_values);
    this._wrapperFields.local_path.copy(other._wrapperFields.local_path);
    this._current_goal_idIntialized = true;
    this._wrapperFields.odom_cache.copy(other._wrapperFields.odom_cache);
  }
  static get classType() {
    return InfoWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"header","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"std_msgs","type":"Header","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"ref_id","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"int32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"loop_closure_id","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"int32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"proximity_detection_id","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"int32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"landmark_id","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"int32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"loop_closure_transform","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"geometry_msgs","type":"Transform","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"wm_state","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"int32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"posterior_keys","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"int32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"posterior_values","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"likelihood_keys","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"int32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"likelihood_values","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"raw_likelihood_keys","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"int32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"raw_likelihood_values","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"weights_keys","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"int32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"weights_values","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"int32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"labels_keys","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"int32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"labels_values","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"stats_keys","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"stats_values","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"local_path","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"int32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"current_goal_id","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"int32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"odom_cache","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"rtabmap_msgs","type":"MapGraph","stringUpperBound":null,"isPrimitiveType":false},"default_value":null}],"baseType":{"pkgName":"rtabmap_msgs","type":"Info","stringUpperBound":null,"isPrimitiveType":false},"msgName":"Info"};
  }
  hasMember(name) {
    let memberNames = ["header","ref_id","loop_closure_id","proximity_detection_id","landmark_id","loop_closure_transform","wm_state","posterior_keys","posterior_values","likelihood_keys","likelihood_values","raw_likelihood_keys","raw_likelihood_values","weights_keys","weights_values","labels_keys","labels_values","stats_keys","stats_values","local_path","current_goal_id","odom_cache"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class InfoArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof InfoWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new InfoWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to InfoArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to InfoArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new InfoRefArray(size);
    this._refObject = new InfoRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new InfoWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof InfoArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "InfoArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      InfoWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return InfoWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return InfoArrayWrapper;
  }
}
module.exports = InfoWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "header",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "std_msgs",
        "type": "Header",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "ref_id",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "int32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "loop_closure_id",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "int32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "proximity_detection_id",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "int32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "landmark_id",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "int32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "loop_closure_transform",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "geometry_msgs",
        "type": "Transform",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "wm_state",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "int32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "posterior_keys",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "int32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "posterior_values",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "likelihood_keys",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "int32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "likelihood_values",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "raw_likelihood_keys",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "int32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "raw_likelihood_values",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "weights_keys",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "int32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "weights_values",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "int32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "labels_keys",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "int32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "labels_values",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "stats_keys",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "stats_values",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "local_path",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "int32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "current_goal_id",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "int32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "odom_cache",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "rtabmap_msgs",
        "type": "MapGraph",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "rtabmap_msgs",
    "type": "Info",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "Info"
}
*/
