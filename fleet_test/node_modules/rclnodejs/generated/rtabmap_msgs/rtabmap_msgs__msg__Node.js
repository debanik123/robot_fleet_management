// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const StringWrapper = require('../../generated/std_msgs/std_msgs__msg__String.js');
const PoseWrapper = require('../../generated/geometry_msgs/geometry_msgs__msg__Pose.js');
const Int32Wrapper = require('../../generated/std_msgs/std_msgs__msg__Int32.js');
const KeyPointWrapper = require('../../generated/rtabmap_msgs/rtabmap_msgs__msg__KeyPoint.js');
const Point3fWrapper = require('../../generated/rtabmap_msgs/rtabmap_msgs__msg__Point3f.js');
const UInt8Wrapper = require('../../generated/std_msgs/std_msgs__msg__UInt8.js');
const SensorDataWrapper = require('../../generated/rtabmap_msgs/rtabmap_msgs__msg__SensorData.js');
const NodeRefStruct = StructType({
  id: primitiveTypes.int32,
  map_id: primitiveTypes.int32,
  weight: primitiveTypes.int32,
  stamp: primitiveTypes.float64,
  label: primitiveTypes.string,
  pose: PoseWrapper.refObjectType,
  word_id_keys: Int32Wrapper.refObjectArrayType,
  word_id_values: Int32Wrapper.refObjectArrayType,
  word_kpts: KeyPointWrapper.refObjectArrayType,
  word_pts: Point3fWrapper.refObjectArrayType,
  word_descriptors: UInt8Wrapper.refObjectArrayType,
  data: SensorDataWrapper.refObjectType,
});
const NodeRefArray = ArrayType(NodeRefStruct);
const NodeRefStructArray = StructType({
  data: NodeRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class NodeWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new NodeRefStruct(other._refObject.toObject());
      this._idIntialized = true;
      this._map_idIntialized = true;
      this._weightIntialized = true;
      this._stampIntialized = true;
      this._labelIntialized = true;
      this._wrapperFields.label =  new StringWrapper(other._wrapperFields.label);
      this._wrapperFields.pose =  new PoseWrapper(other._wrapperFields.pose);
      this._wrapperFields.word_id_keys = Int32Wrapper.createArray();
      this._wrapperFields.word_id_keys.copy(other._wrapperFields.word_id_keys);
      this._wrapperFields.word_id_values = Int32Wrapper.createArray();
      this._wrapperFields.word_id_values.copy(other._wrapperFields.word_id_values);
      this._wrapperFields.word_kpts = KeyPointWrapper.createArray();
      this._wrapperFields.word_kpts.copy(other._wrapperFields.word_kpts);
      this._wrapperFields.word_pts = Point3fWrapper.createArray();
      this._wrapperFields.word_pts.copy(other._wrapperFields.word_pts);
      this._wrapperFields.word_descriptors = UInt8Wrapper.createArray();
      this._wrapperFields.word_descriptors.copy(other._wrapperFields.word_descriptors);
      this._wrapperFields.data =  new SensorDataWrapper(other._wrapperFields.data);
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new NodeRefStruct();
    this._idIntialized = false;
    this._map_idIntialized = false;
    this._weightIntialized = false;
    this._stampIntialized = false;
    this._labelIntialized = false;
    this._wrapperFields.label = new StringWrapper();
    this._wrapperFields.pose = new PoseWrapper();
    this._wrapperFields.word_id_keys = Int32Wrapper.createArray();
    this._wrapperFields.word_id_values = Int32Wrapper.createArray();
    this._wrapperFields.word_kpts = KeyPointWrapper.createArray();
    this._wrapperFields.word_pts = Point3fWrapper.createArray();
    this._wrapperFields.word_descriptors = UInt8Wrapper.createArray();
    this._wrapperFields.data = new SensorDataWrapper();
  }
  static createFromRefObject(refObject) {
    let self = new NodeWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new NodeArrayWrapper;
  }
  static get ArrayType() {
    return NodeArrayWrapper;
  }
  static get refObjectArrayType() {
    return NodeRefStructArray
  }
  static get refObjectType() {
    return NodeRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._idIntialized) {
        throw new TypeError('Invalid argument: id in Node');
      }
      if (checkConsistency && !this._map_idIntialized) {
        throw new TypeError('Invalid argument: map_id in Node');
      }
      if (checkConsistency && !this._weightIntialized) {
        throw new TypeError('Invalid argument: weight in Node');
      }
      if (checkConsistency && !this._stampIntialized) {
        throw new TypeError('Invalid argument: stamp in Node');
      }
      if (checkConsistency && !this._labelIntialized) {
        throw new TypeError('Invalid argument: label in Node');
      }
    if (own) {
      this._wrapperFields.label.freeze(own, checkConsistency);
    }
    this._refObject.label = this._wrapperFields.label.refObject;
    this._wrapperFields.pose.freeze(own, checkConsistency);
    this._refObject.pose = this._wrapperFields.pose.refObject;
    this._wrapperFields.word_id_keys.freeze(own, checkConsistency);
    this._refObject.word_id_keys = this._wrapperFields.word_id_keys.refObject;
    if (own) {
      this._wrapperFields.word_id_keys.fill(Int32Array.from([]));
      this._wrapperFields.word_id_keys.freeze(own, checkConsistency);
      this._refObject.word_id_keys = this._wrapperFields.word_id_keys.refObject;
    }
    this._wrapperFields.word_id_values.freeze(own, checkConsistency);
    this._refObject.word_id_values = this._wrapperFields.word_id_values.refObject;
    if (own) {
      this._wrapperFields.word_id_values.fill(Int32Array.from([]));
      this._wrapperFields.word_id_values.freeze(own, checkConsistency);
      this._refObject.word_id_values = this._wrapperFields.word_id_values.refObject;
    }
    this._wrapperFields.word_kpts.freeze(own, checkConsistency);
    this._refObject.word_kpts = this._wrapperFields.word_kpts.refObject;
    this._wrapperFields.word_pts.freeze(own, checkConsistency);
    this._refObject.word_pts = this._wrapperFields.word_pts.refObject;
    this._wrapperFields.word_descriptors.freeze(own, checkConsistency);
    this._refObject.word_descriptors = this._wrapperFields.word_descriptors.refObject;
    if (own) {
      this._wrapperFields.word_descriptors.fill(Uint8Array.from([]));
      this._wrapperFields.word_descriptors.freeze(own, checkConsistency);
      this._refObject.word_descriptors = this._wrapperFields.word_descriptors.refObject;
    }
    this._wrapperFields.data.freeze(own, checkConsistency);
    this._refObject.data = this._wrapperFields.data.refObject;
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._idIntialized = true;
    this._refObject.id = refObject.id;
    this._map_idIntialized = true;
    this._refObject.map_id = refObject.map_id;
    this._weightIntialized = true;
    this._refObject.weight = refObject.weight;
    this._stampIntialized = true;
    this._refObject.stamp = refObject.stamp;
    this._labelIntialized = true;
    this._wrapperFields.label.data = refObject.label.data;
    this._wrapperFields.pose.copyRefObject(refObject.pose);
    this._wrapperFields.word_id_keys.copyRefObject(refObject.word_id_keys);
    this._wrapperFields.word_id_values.copyRefObject(refObject.word_id_values);
    this._wrapperFields.word_kpts.copyRefObject(refObject.word_kpts);
    this._wrapperFields.word_pts.copyRefObject(refObject.word_pts);
    this._wrapperFields.word_descriptors.copyRefObject(refObject.word_descriptors);
    this._wrapperFields.data.copyRefObject(refObject.data);
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    StringWrapper.freeStruct(refObject.label);
    PoseWrapper.freeStruct(refObject.pose);
    if (refObject.word_id_keys.size != 0) {
      Int32Wrapper.ArrayType.freeArray(refObject.word_id_keys);
      if (Int32Wrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.word_id_keys, Int32Wrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.word_id_values.size != 0) {
      Int32Wrapper.ArrayType.freeArray(refObject.word_id_values);
      if (Int32Wrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.word_id_values, Int32Wrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.word_kpts.size != 0) {
      KeyPointWrapper.ArrayType.freeArray(refObject.word_kpts);
      if (KeyPointWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.word_kpts, KeyPointWrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.word_pts.size != 0) {
      Point3fWrapper.ArrayType.freeArray(refObject.word_pts);
      if (Point3fWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.word_pts, Point3fWrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.word_descriptors.size != 0) {
      UInt8Wrapper.ArrayType.freeArray(refObject.word_descriptors);
      if (UInt8Wrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.word_descriptors, UInt8Wrapper.refObjectArrayType, 'data');
      }
    }
    SensorDataWrapper.freeStruct(refObject.data);
  }
  static destoryRawROS(msg) {
    NodeWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'rtabmap_msgs', subFolder: 'msg', interfaceName: 'Node'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get id() {
    if (!this._idIntialized) {
      return undefined;
    }
    return this._refObject.id;
  }
  set id(value) {
    this._idIntialized = true;
    this._refObject.id = value;
  }
  get map_id() {
    if (!this._map_idIntialized) {
      return undefined;
    }
    return this._refObject.map_id;
  }
  set map_id(value) {
    this._map_idIntialized = true;
    this._refObject.map_id = value;
  }
  get weight() {
    if (!this._weightIntialized) {
      return undefined;
    }
    return this._refObject.weight;
  }
  set weight(value) {
    this._weightIntialized = true;
    this._refObject.weight = value;
  }
  get stamp() {
    if (!this._stampIntialized) {
      return undefined;
    }
    return this._refObject.stamp;
  }
  set stamp(value) {
    this._stampIntialized = true;
    this._refObject.stamp = value;
  }
  get label() {
    if (!this._labelIntialized) {
      return undefined;
    }
    return this._wrapperFields.label.data;
  }
  set label(value) {
    this._labelIntialized = true;
    this._wrapperFields.label.data = value;
  }
  get pose() {
    return this._wrapperFields.pose;
  }
  set pose(value) {
    if (value instanceof PoseWrapper) {
      this._wrapperFields.pose.copy(value);
    } else {
      this._wrapperFields.pose.copy(new PoseWrapper(value));
    }
  }
  get word_id_keys() {
    return this._wrapperFields['word_id_keys'].data;
  }
  set word_id_keys(value) {
    this._wrapperFields['word_id_keys'].fill(value);
  }
  get word_id_values() {
    return this._wrapperFields['word_id_values'].data;
  }
  set word_id_values(value) {
    this._wrapperFields['word_id_values'].fill(value);
  }
  get word_kpts() {
    return this._wrapperFields.word_kpts;
  }
  set word_kpts(value) {
    this._wrapperFields.word_kpts.fill(value);
  }
  get word_pts() {
    return this._wrapperFields.word_pts;
  }
  set word_pts(value) {
    this._wrapperFields.word_pts.fill(value);
  }
  get word_descriptors() {
    return this._wrapperFields['word_descriptors'].data;
  }
  set word_descriptors(value) {
    this._wrapperFields['word_descriptors'].fill(value);
  }
  get data() {
    return this._wrapperFields.data;
  }
  set data(value) {
    if (value instanceof SensorDataWrapper) {
      this._wrapperFields.data.copy(value);
    } else {
      this._wrapperFields.data.copy(new SensorDataWrapper(value));
    }
  }
  copyRefObject(refObject) {
    this._refObject = new NodeRefStruct(refObject.toObject());
    this._idIntialized = true;
    this._map_idIntialized = true;
    this._weightIntialized = true;
    this._stampIntialized = true;
    this._labelIntialized = true;
    this._wrapperFields.label.copyRefObject(this._refObject.label);
    this._wrapperFields.pose.copyRefObject(this._refObject.pose);
    this._wrapperFields.word_id_keys.copyRefObject(this._refObject.word_id_keys);
    this._wrapperFields.word_id_values.copyRefObject(this._refObject.word_id_values);
    this._wrapperFields.word_kpts.copyRefObject(this._refObject.word_kpts);
    this._wrapperFields.word_pts.copyRefObject(this._refObject.word_pts);
    this._wrapperFields.word_descriptors.copyRefObject(this._refObject.word_descriptors);
    this._wrapperFields.data.copyRefObject(this._refObject.data);
  }
  copy(other) {
    this._refObject = new NodeRefStruct(other._refObject.toObject());
    this._idIntialized = true;
    this._map_idIntialized = true;
    this._weightIntialized = true;
    this._stampIntialized = true;
    this._labelIntialized = true;
    this._wrapperFields.label.copy(other._wrapperFields.label);
    this._wrapperFields.pose.copy(other._wrapperFields.pose);
    this._wrapperFields.word_id_keys.copy(other._wrapperFields.word_id_keys);
    this._wrapperFields.word_id_values.copy(other._wrapperFields.word_id_values);
    this._wrapperFields.word_kpts.copy(other._wrapperFields.word_kpts);
    this._wrapperFields.word_pts.copy(other._wrapperFields.word_pts);
    this._wrapperFields.word_descriptors.copy(other._wrapperFields.word_descriptors);
    this._wrapperFields.data.copy(other._wrapperFields.data);
  }
  static get classType() {
    return NodeWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"id","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"int32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"map_id","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"int32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"weight","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"int32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"stamp","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"label","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"pose","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"geometry_msgs","type":"Pose","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"word_id_keys","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"int32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"word_id_values","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"int32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"word_kpts","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":"rtabmap_msgs","type":"KeyPoint","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"word_pts","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":"rtabmap_msgs","type":"Point3f","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"word_descriptors","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"data","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"rtabmap_msgs","type":"SensorData","stringUpperBound":null,"isPrimitiveType":false},"default_value":null}],"baseType":{"pkgName":"rtabmap_msgs","type":"Node","stringUpperBound":null,"isPrimitiveType":false},"msgName":"Node"};
  }
  hasMember(name) {
    let memberNames = ["id","map_id","weight","stamp","label","pose","word_id_keys","word_id_values","word_kpts","word_pts","word_descriptors","data"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class NodeArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof NodeWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new NodeWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to NodeArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to NodeArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new NodeRefArray(size);
    this._refObject = new NodeRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new NodeWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof NodeArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "NodeArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      NodeWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return NodeWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return NodeArrayWrapper;
  }
}
module.exports = NodeWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "id",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "int32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "map_id",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "int32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "weight",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "int32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "stamp",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "label",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "pose",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "geometry_msgs",
        "type": "Pose",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "word_id_keys",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "int32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "word_id_values",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "int32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "word_kpts",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": "rtabmap_msgs",
        "type": "KeyPoint",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "word_pts",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": "rtabmap_msgs",
        "type": "Point3f",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "word_descriptors",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "data",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "rtabmap_msgs",
        "type": "SensorData",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "rtabmap_msgs",
    "type": "Node",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "Node"
}
*/
