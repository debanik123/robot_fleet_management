// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const DataHeaderRefStruct = StructType({
  version_version: primitiveTypes.uint8,
  version_major_version: primitiveTypes.uint8,
  version_minor_version: primitiveTypes.uint8,
  version_release: primitiveTypes.uint8,
  serial_number_of_device: primitiveTypes.uint32,
  serial_number_of_channel_plug: primitiveTypes.uint32,
  channel_number: primitiveTypes.uint8,
  sequence_number: primitiveTypes.uint32,
  scan_number: primitiveTypes.uint32,
  timestamp_date: primitiveTypes.uint16,
  timestamp_time: primitiveTypes.uint32,
});
const DataHeaderRefArray = ArrayType(DataHeaderRefStruct);
const DataHeaderRefStructArray = StructType({
  data: DataHeaderRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class DataHeaderWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new DataHeaderRefStruct(other._refObject.toObject());
      this._version_versionIntialized = true;
      this._version_major_versionIntialized = true;
      this._version_minor_versionIntialized = true;
      this._version_releaseIntialized = true;
      this._serial_number_of_deviceIntialized = true;
      this._serial_number_of_channel_plugIntialized = true;
      this._channel_numberIntialized = true;
      this._sequence_numberIntialized = true;
      this._scan_numberIntialized = true;
      this._timestamp_dateIntialized = true;
      this._timestamp_timeIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new DataHeaderRefStruct();
    this._version_versionIntialized = false;
    this._version_major_versionIntialized = false;
    this._version_minor_versionIntialized = false;
    this._version_releaseIntialized = false;
    this._serial_number_of_deviceIntialized = false;
    this._serial_number_of_channel_plugIntialized = false;
    this._channel_numberIntialized = false;
    this._sequence_numberIntialized = false;
    this._scan_numberIntialized = false;
    this._timestamp_dateIntialized = false;
    this._timestamp_timeIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new DataHeaderWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new DataHeaderArrayWrapper;
  }
  static get ArrayType() {
    return DataHeaderArrayWrapper;
  }
  static get refObjectArrayType() {
    return DataHeaderRefStructArray
  }
  static get refObjectType() {
    return DataHeaderRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._version_versionIntialized) {
        throw new TypeError('Invalid argument: version_version in DataHeader');
      }
      if (checkConsistency && !this._version_major_versionIntialized) {
        throw new TypeError('Invalid argument: version_major_version in DataHeader');
      }
      if (checkConsistency && !this._version_minor_versionIntialized) {
        throw new TypeError('Invalid argument: version_minor_version in DataHeader');
      }
      if (checkConsistency && !this._version_releaseIntialized) {
        throw new TypeError('Invalid argument: version_release in DataHeader');
      }
      if (checkConsistency && !this._serial_number_of_deviceIntialized) {
        throw new TypeError('Invalid argument: serial_number_of_device in DataHeader');
      }
      if (checkConsistency && !this._serial_number_of_channel_plugIntialized) {
        throw new TypeError('Invalid argument: serial_number_of_channel_plug in DataHeader');
      }
      if (checkConsistency && !this._channel_numberIntialized) {
        throw new TypeError('Invalid argument: channel_number in DataHeader');
      }
      if (checkConsistency && !this._sequence_numberIntialized) {
        throw new TypeError('Invalid argument: sequence_number in DataHeader');
      }
      if (checkConsistency && !this._scan_numberIntialized) {
        throw new TypeError('Invalid argument: scan_number in DataHeader');
      }
      if (checkConsistency && !this._timestamp_dateIntialized) {
        throw new TypeError('Invalid argument: timestamp_date in DataHeader');
      }
      if (checkConsistency && !this._timestamp_timeIntialized) {
        throw new TypeError('Invalid argument: timestamp_time in DataHeader');
      }
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._version_versionIntialized = true;
    this._refObject.version_version = refObject.version_version;
    this._version_major_versionIntialized = true;
    this._refObject.version_major_version = refObject.version_major_version;
    this._version_minor_versionIntialized = true;
    this._refObject.version_minor_version = refObject.version_minor_version;
    this._version_releaseIntialized = true;
    this._refObject.version_release = refObject.version_release;
    this._serial_number_of_deviceIntialized = true;
    this._refObject.serial_number_of_device = refObject.serial_number_of_device;
    this._serial_number_of_channel_plugIntialized = true;
    this._refObject.serial_number_of_channel_plug = refObject.serial_number_of_channel_plug;
    this._channel_numberIntialized = true;
    this._refObject.channel_number = refObject.channel_number;
    this._sequence_numberIntialized = true;
    this._refObject.sequence_number = refObject.sequence_number;
    this._scan_numberIntialized = true;
    this._refObject.scan_number = refObject.scan_number;
    this._timestamp_dateIntialized = true;
    this._refObject.timestamp_date = refObject.timestamp_date;
    this._timestamp_timeIntialized = true;
    this._refObject.timestamp_time = refObject.timestamp_time;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
  }
  static destoryRawROS(msg) {
    DataHeaderWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'sick_safetyscanners2_interfaces', subFolder: 'msg', interfaceName: 'DataHeader'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get version_version() {
    if (!this._version_versionIntialized) {
      return undefined;
    }
    return this._refObject.version_version;
  }
  set version_version(value) {
    this._version_versionIntialized = true;
    this._refObject.version_version = value;
  }
  get version_major_version() {
    if (!this._version_major_versionIntialized) {
      return undefined;
    }
    return this._refObject.version_major_version;
  }
  set version_major_version(value) {
    this._version_major_versionIntialized = true;
    this._refObject.version_major_version = value;
  }
  get version_minor_version() {
    if (!this._version_minor_versionIntialized) {
      return undefined;
    }
    return this._refObject.version_minor_version;
  }
  set version_minor_version(value) {
    this._version_minor_versionIntialized = true;
    this._refObject.version_minor_version = value;
  }
  get version_release() {
    if (!this._version_releaseIntialized) {
      return undefined;
    }
    return this._refObject.version_release;
  }
  set version_release(value) {
    this._version_releaseIntialized = true;
    this._refObject.version_release = value;
  }
  get serial_number_of_device() {
    if (!this._serial_number_of_deviceIntialized) {
      return undefined;
    }
    return this._refObject.serial_number_of_device;
  }
  set serial_number_of_device(value) {
    this._serial_number_of_deviceIntialized = true;
    this._refObject.serial_number_of_device = value;
  }
  get serial_number_of_channel_plug() {
    if (!this._serial_number_of_channel_plugIntialized) {
      return undefined;
    }
    return this._refObject.serial_number_of_channel_plug;
  }
  set serial_number_of_channel_plug(value) {
    this._serial_number_of_channel_plugIntialized = true;
    this._refObject.serial_number_of_channel_plug = value;
  }
  get channel_number() {
    if (!this._channel_numberIntialized) {
      return undefined;
    }
    return this._refObject.channel_number;
  }
  set channel_number(value) {
    this._channel_numberIntialized = true;
    this._refObject.channel_number = value;
  }
  get sequence_number() {
    if (!this._sequence_numberIntialized) {
      return undefined;
    }
    return this._refObject.sequence_number;
  }
  set sequence_number(value) {
    this._sequence_numberIntialized = true;
    this._refObject.sequence_number = value;
  }
  get scan_number() {
    if (!this._scan_numberIntialized) {
      return undefined;
    }
    return this._refObject.scan_number;
  }
  set scan_number(value) {
    this._scan_numberIntialized = true;
    this._refObject.scan_number = value;
  }
  get timestamp_date() {
    if (!this._timestamp_dateIntialized) {
      return undefined;
    }
    return this._refObject.timestamp_date;
  }
  set timestamp_date(value) {
    this._timestamp_dateIntialized = true;
    this._refObject.timestamp_date = value;
  }
  get timestamp_time() {
    if (!this._timestamp_timeIntialized) {
      return undefined;
    }
    return this._refObject.timestamp_time;
  }
  set timestamp_time(value) {
    this._timestamp_timeIntialized = true;
    this._refObject.timestamp_time = value;
  }
  copyRefObject(refObject) {
    this._refObject = new DataHeaderRefStruct(refObject.toObject());
    this._version_versionIntialized = true;
    this._version_major_versionIntialized = true;
    this._version_minor_versionIntialized = true;
    this._version_releaseIntialized = true;
    this._serial_number_of_deviceIntialized = true;
    this._serial_number_of_channel_plugIntialized = true;
    this._channel_numberIntialized = true;
    this._sequence_numberIntialized = true;
    this._scan_numberIntialized = true;
    this._timestamp_dateIntialized = true;
    this._timestamp_timeIntialized = true;
  }
  copy(other) {
    this._refObject = new DataHeaderRefStruct(other._refObject.toObject());
    this._version_versionIntialized = true;
    this._version_major_versionIntialized = true;
    this._version_minor_versionIntialized = true;
    this._version_releaseIntialized = true;
    this._serial_number_of_deviceIntialized = true;
    this._serial_number_of_channel_plugIntialized = true;
    this._channel_numberIntialized = true;
    this._sequence_numberIntialized = true;
    this._scan_numberIntialized = true;
    this._timestamp_dateIntialized = true;
    this._timestamp_timeIntialized = true;
  }
  static get classType() {
    return DataHeaderWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"version_version","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"version_major_version","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"version_minor_version","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"version_release","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"serial_number_of_device","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"serial_number_of_channel_plug","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"channel_number","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"sequence_number","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"scan_number","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"timestamp_date","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint16","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"timestamp_time","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"sick_safetyscanners2_interfaces","type":"DataHeader","stringUpperBound":null,"isPrimitiveType":false},"msgName":"DataHeader"};
  }
  hasMember(name) {
    let memberNames = ["version_version","version_major_version","version_minor_version","version_release","serial_number_of_device","serial_number_of_channel_plug","channel_number","sequence_number","scan_number","timestamp_date","timestamp_time"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class DataHeaderArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof DataHeaderWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new DataHeaderWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to DataHeaderArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to DataHeaderArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new DataHeaderRefArray(size);
    this._refObject = new DataHeaderRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new DataHeaderWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof DataHeaderArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "DataHeaderArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      DataHeaderWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return DataHeaderWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return DataHeaderArrayWrapper;
  }
}
module.exports = DataHeaderWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "version_version",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "version_major_version",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "version_minor_version",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "version_release",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "serial_number_of_device",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "serial_number_of_channel_plug",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "channel_number",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "sequence_number",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "scan_number",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "timestamp_date",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint16",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "timestamp_time",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "sick_safetyscanners2_interfaces",
    "type": "DataHeader",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "DataHeader"
}
*/
