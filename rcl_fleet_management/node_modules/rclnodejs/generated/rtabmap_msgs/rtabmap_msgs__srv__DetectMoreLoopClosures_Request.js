// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const DetectMoreLoopClosures_RequestRefStruct = StructType({
  cluster_radius_max: primitiveTypes.float32,
  cluster_radius_min: primitiveTypes.float32,
  cluster_angle: primitiveTypes.float32,
  iterations: primitiveTypes.int32,
  intra_only: primitiveTypes.bool,
  inter_only: primitiveTypes.bool,
});
const DetectMoreLoopClosures_RequestRefArray = ArrayType(DetectMoreLoopClosures_RequestRefStruct);
const DetectMoreLoopClosures_RequestRefStructArray = StructType({
  data: DetectMoreLoopClosures_RequestRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class DetectMoreLoopClosures_RequestWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new DetectMoreLoopClosures_RequestRefStruct(other._refObject.toObject());
      this._cluster_radius_maxIntialized = true;
      this._cluster_radius_minIntialized = true;
      this._cluster_angleIntialized = true;
      this._iterationsIntialized = true;
      this._intra_onlyIntialized = true;
      this._inter_onlyIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new DetectMoreLoopClosures_RequestRefStruct();
    this._cluster_radius_maxIntialized = false;
    this._cluster_radius_minIntialized = false;
    this._cluster_angleIntialized = false;
    this._iterationsIntialized = false;
    this._intra_onlyIntialized = false;
    this._inter_onlyIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new DetectMoreLoopClosures_RequestWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new DetectMoreLoopClosures_RequestArrayWrapper;
  }
  static get ArrayType() {
    return DetectMoreLoopClosures_RequestArrayWrapper;
  }
  static get refObjectArrayType() {
    return DetectMoreLoopClosures_RequestRefStructArray
  }
  static get refObjectType() {
    return DetectMoreLoopClosures_RequestRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._cluster_radius_maxIntialized) {
        throw new TypeError('Invalid argument: cluster_radius_max in DetectMoreLoopClosures_Request');
      }
      if (checkConsistency && !this._cluster_radius_minIntialized) {
        throw new TypeError('Invalid argument: cluster_radius_min in DetectMoreLoopClosures_Request');
      }
      if (checkConsistency && !this._cluster_angleIntialized) {
        throw new TypeError('Invalid argument: cluster_angle in DetectMoreLoopClosures_Request');
      }
      if (checkConsistency && !this._iterationsIntialized) {
        throw new TypeError('Invalid argument: iterations in DetectMoreLoopClosures_Request');
      }
      if (checkConsistency && !this._intra_onlyIntialized) {
        throw new TypeError('Invalid argument: intra_only in DetectMoreLoopClosures_Request');
      }
      if (checkConsistency && !this._inter_onlyIntialized) {
        throw new TypeError('Invalid argument: inter_only in DetectMoreLoopClosures_Request');
      }
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._cluster_radius_maxIntialized = true;
    this._refObject.cluster_radius_max = refObject.cluster_radius_max;
    this._cluster_radius_minIntialized = true;
    this._refObject.cluster_radius_min = refObject.cluster_radius_min;
    this._cluster_angleIntialized = true;
    this._refObject.cluster_angle = refObject.cluster_angle;
    this._iterationsIntialized = true;
    this._refObject.iterations = refObject.iterations;
    this._intra_onlyIntialized = true;
    this._refObject.intra_only = refObject.intra_only;
    this._inter_onlyIntialized = true;
    this._refObject.inter_only = refObject.inter_only;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
  }
  static destoryRawROS(msg) {
    DetectMoreLoopClosures_RequestWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'rtabmap_msgs', subFolder: 'srv', interfaceName: 'DetectMoreLoopClosures_Request'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get cluster_radius_max() {
    if (!this._cluster_radius_maxIntialized) {
      return undefined;
    }
    return this._refObject.cluster_radius_max;
  }
  set cluster_radius_max(value) {
    this._cluster_radius_maxIntialized = true;
    this._refObject.cluster_radius_max = value;
  }
  get cluster_radius_min() {
    if (!this._cluster_radius_minIntialized) {
      return undefined;
    }
    return this._refObject.cluster_radius_min;
  }
  set cluster_radius_min(value) {
    this._cluster_radius_minIntialized = true;
    this._refObject.cluster_radius_min = value;
  }
  get cluster_angle() {
    if (!this._cluster_angleIntialized) {
      return undefined;
    }
    return this._refObject.cluster_angle;
  }
  set cluster_angle(value) {
    this._cluster_angleIntialized = true;
    this._refObject.cluster_angle = value;
  }
  get iterations() {
    if (!this._iterationsIntialized) {
      return undefined;
    }
    return this._refObject.iterations;
  }
  set iterations(value) {
    this._iterationsIntialized = true;
    this._refObject.iterations = value;
  }
  get intra_only() {
    if (!this._intra_onlyIntialized) {
      return undefined;
    }
    return this._refObject.intra_only;
  }
  set intra_only(value) {
    this._intra_onlyIntialized = true;
    this._refObject.intra_only = value;
  }
  get inter_only() {
    if (!this._inter_onlyIntialized) {
      return undefined;
    }
    return this._refObject.inter_only;
  }
  set inter_only(value) {
    this._inter_onlyIntialized = true;
    this._refObject.inter_only = value;
  }
  copyRefObject(refObject) {
    this._refObject = new DetectMoreLoopClosures_RequestRefStruct(refObject.toObject());
    this._cluster_radius_maxIntialized = true;
    this._cluster_radius_minIntialized = true;
    this._cluster_angleIntialized = true;
    this._iterationsIntialized = true;
    this._intra_onlyIntialized = true;
    this._inter_onlyIntialized = true;
  }
  copy(other) {
    this._refObject = new DetectMoreLoopClosures_RequestRefStruct(other._refObject.toObject());
    this._cluster_radius_maxIntialized = true;
    this._cluster_radius_minIntialized = true;
    this._cluster_angleIntialized = true;
    this._iterationsIntialized = true;
    this._intra_onlyIntialized = true;
    this._inter_onlyIntialized = true;
  }
  static get classType() {
    return DetectMoreLoopClosures_RequestWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"cluster_radius_max","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"cluster_radius_min","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"cluster_angle","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"iterations","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"int32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"intra_only","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"inter_only","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"rtabmap_msgs","type":"DetectMoreLoopClosures_Request","stringUpperBound":null,"isPrimitiveType":false},"msgName":"DetectMoreLoopClosures_Request"};
  }
  hasMember(name) {
    let memberNames = ["cluster_radius_max","cluster_radius_min","cluster_angle","iterations","intra_only","inter_only"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class DetectMoreLoopClosures_RequestArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof DetectMoreLoopClosures_RequestWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new DetectMoreLoopClosures_RequestWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to DetectMoreLoopClosures_RequestArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to DetectMoreLoopClosures_RequestArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new DetectMoreLoopClosures_RequestRefArray(size);
    this._refObject = new DetectMoreLoopClosures_RequestRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new DetectMoreLoopClosures_RequestWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof DetectMoreLoopClosures_RequestArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "DetectMoreLoopClosures_RequestArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      DetectMoreLoopClosures_RequestWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return DetectMoreLoopClosures_RequestWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return DetectMoreLoopClosures_RequestArrayWrapper;
  }
}
module.exports = DetectMoreLoopClosures_RequestWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "cluster_radius_max",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "cluster_radius_min",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "cluster_angle",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "iterations",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "int32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "intra_only",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "inter_only",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "rtabmap_msgs",
    "type": "DetectMoreLoopClosures_Request",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "DetectMoreLoopClosures_Request"
}
*/
