// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const Point2fWrapper = require('../../generated/rtabmap_msgs/rtabmap_msgs__msg__Point2f.js');
const KeyPointRefStruct = StructType({
  pt: Point2fWrapper.refObjectType,
  size: primitiveTypes.float32,
  angle: primitiveTypes.float32,
  response: primitiveTypes.float32,
  octave: primitiveTypes.int32,
  class_id: primitiveTypes.int32,
});
const KeyPointRefArray = ArrayType(KeyPointRefStruct);
const KeyPointRefStructArray = StructType({
  data: KeyPointRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class KeyPointWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new KeyPointRefStruct(other._refObject.toObject());
      this._wrapperFields.pt =  new Point2fWrapper(other._wrapperFields.pt);
      this._sizeIntialized = true;
      this._angleIntialized = true;
      this._responseIntialized = true;
      this._octaveIntialized = true;
      this._class_idIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new KeyPointRefStruct();
    this._wrapperFields.pt = new Point2fWrapper();
    this._sizeIntialized = false;
    this._angleIntialized = false;
    this._responseIntialized = false;
    this._octaveIntialized = false;
    this._class_idIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new KeyPointWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new KeyPointArrayWrapper;
  }
  static get ArrayType() {
    return KeyPointArrayWrapper;
  }
  static get refObjectArrayType() {
    return KeyPointRefStructArray
  }
  static get refObjectType() {
    return KeyPointRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._sizeIntialized) {
        throw new TypeError('Invalid argument: size in KeyPoint');
      }
      if (checkConsistency && !this._angleIntialized) {
        throw new TypeError('Invalid argument: angle in KeyPoint');
      }
      if (checkConsistency && !this._responseIntialized) {
        throw new TypeError('Invalid argument: response in KeyPoint');
      }
      if (checkConsistency && !this._octaveIntialized) {
        throw new TypeError('Invalid argument: octave in KeyPoint');
      }
      if (checkConsistency && !this._class_idIntialized) {
        throw new TypeError('Invalid argument: class_id in KeyPoint');
      }
    this._wrapperFields.pt.freeze(own, checkConsistency);
    this._refObject.pt = this._wrapperFields.pt.refObject;
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._wrapperFields.pt.copyRefObject(refObject.pt);
    this._sizeIntialized = true;
    this._refObject.size = refObject.size;
    this._angleIntialized = true;
    this._refObject.angle = refObject.angle;
    this._responseIntialized = true;
    this._refObject.response = refObject.response;
    this._octaveIntialized = true;
    this._refObject.octave = refObject.octave;
    this._class_idIntialized = true;
    this._refObject.class_id = refObject.class_id;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    Point2fWrapper.freeStruct(refObject.pt);
  }
  static destoryRawROS(msg) {
    KeyPointWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'rtabmap_msgs', subFolder: 'msg', interfaceName: 'KeyPoint'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get pt() {
    return this._wrapperFields.pt;
  }
  set pt(value) {
    if (value instanceof Point2fWrapper) {
      this._wrapperFields.pt.copy(value);
    } else {
      this._wrapperFields.pt.copy(new Point2fWrapper(value));
    }
  }
  get size() {
    if (!this._sizeIntialized) {
      return undefined;
    }
    return this._refObject.size;
  }
  set size(value) {
    this._sizeIntialized = true;
    this._refObject.size = value;
  }
  get angle() {
    if (!this._angleIntialized) {
      return undefined;
    }
    return this._refObject.angle;
  }
  set angle(value) {
    this._angleIntialized = true;
    this._refObject.angle = value;
  }
  get response() {
    if (!this._responseIntialized) {
      return undefined;
    }
    return this._refObject.response;
  }
  set response(value) {
    this._responseIntialized = true;
    this._refObject.response = value;
  }
  get octave() {
    if (!this._octaveIntialized) {
      return undefined;
    }
    return this._refObject.octave;
  }
  set octave(value) {
    this._octaveIntialized = true;
    this._refObject.octave = value;
  }
  get class_id() {
    if (!this._class_idIntialized) {
      return undefined;
    }
    return this._refObject.class_id;
  }
  set class_id(value) {
    this._class_idIntialized = true;
    this._refObject.class_id = value;
  }
  copyRefObject(refObject) {
    this._refObject = new KeyPointRefStruct(refObject.toObject());
    this._wrapperFields.pt.copyRefObject(this._refObject.pt);
    this._sizeIntialized = true;
    this._angleIntialized = true;
    this._responseIntialized = true;
    this._octaveIntialized = true;
    this._class_idIntialized = true;
  }
  copy(other) {
    this._refObject = new KeyPointRefStruct(other._refObject.toObject());
    this._wrapperFields.pt.copy(other._wrapperFields.pt);
    this._sizeIntialized = true;
    this._angleIntialized = true;
    this._responseIntialized = true;
    this._octaveIntialized = true;
    this._class_idIntialized = true;
  }
  static get classType() {
    return KeyPointWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"pt","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"rtabmap_msgs","type":"Point2f","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"size","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"angle","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"response","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"octave","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"int32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"class_id","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"int32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"rtabmap_msgs","type":"KeyPoint","stringUpperBound":null,"isPrimitiveType":false},"msgName":"KeyPoint"};
  }
  hasMember(name) {
    let memberNames = ["pt","size","angle","response","octave","class_id"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class KeyPointArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof KeyPointWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new KeyPointWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to KeyPointArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to KeyPointArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new KeyPointRefArray(size);
    this._refObject = new KeyPointRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new KeyPointWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof KeyPointArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "KeyPointArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      KeyPointWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return KeyPointWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return KeyPointArrayWrapper;
  }
}
module.exports = KeyPointWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "pt",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "rtabmap_msgs",
        "type": "Point2f",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "size",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "angle",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "response",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "octave",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "int32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "class_id",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "int32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "rtabmap_msgs",
    "type": "KeyPoint",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "KeyPoint"
}
*/
