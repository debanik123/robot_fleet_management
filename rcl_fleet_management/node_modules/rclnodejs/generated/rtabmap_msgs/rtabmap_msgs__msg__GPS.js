// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const GPSRefStruct = StructType({
  stamp: primitiveTypes.float64,
  longitude: primitiveTypes.float64,
  latitude: primitiveTypes.float64,
  altitude: primitiveTypes.float64,
  error: primitiveTypes.float64,
  bearing: primitiveTypes.float64,
});
const GPSRefArray = ArrayType(GPSRefStruct);
const GPSRefStructArray = StructType({
  data: GPSRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class GPSWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new GPSRefStruct(other._refObject.toObject());
      this._stampIntialized = true;
      this._longitudeIntialized = true;
      this._latitudeIntialized = true;
      this._altitudeIntialized = true;
      this._errorIntialized = true;
      this._bearingIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new GPSRefStruct();
    this._stampIntialized = false;
    this._longitudeIntialized = false;
    this._latitudeIntialized = false;
    this._altitudeIntialized = false;
    this._errorIntialized = false;
    this._bearingIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new GPSWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new GPSArrayWrapper;
  }
  static get ArrayType() {
    return GPSArrayWrapper;
  }
  static get refObjectArrayType() {
    return GPSRefStructArray
  }
  static get refObjectType() {
    return GPSRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._stampIntialized) {
        throw new TypeError('Invalid argument: stamp in GPS');
      }
      if (checkConsistency && !this._longitudeIntialized) {
        throw new TypeError('Invalid argument: longitude in GPS');
      }
      if (checkConsistency && !this._latitudeIntialized) {
        throw new TypeError('Invalid argument: latitude in GPS');
      }
      if (checkConsistency && !this._altitudeIntialized) {
        throw new TypeError('Invalid argument: altitude in GPS');
      }
      if (checkConsistency && !this._errorIntialized) {
        throw new TypeError('Invalid argument: error in GPS');
      }
      if (checkConsistency && !this._bearingIntialized) {
        throw new TypeError('Invalid argument: bearing in GPS');
      }
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._stampIntialized = true;
    this._refObject.stamp = refObject.stamp;
    this._longitudeIntialized = true;
    this._refObject.longitude = refObject.longitude;
    this._latitudeIntialized = true;
    this._refObject.latitude = refObject.latitude;
    this._altitudeIntialized = true;
    this._refObject.altitude = refObject.altitude;
    this._errorIntialized = true;
    this._refObject.error = refObject.error;
    this._bearingIntialized = true;
    this._refObject.bearing = refObject.bearing;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
  }
  static destoryRawROS(msg) {
    GPSWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'rtabmap_msgs', subFolder: 'msg', interfaceName: 'GPS'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get stamp() {
    if (!this._stampIntialized) {
      return undefined;
    }
    return this._refObject.stamp;
  }
  set stamp(value) {
    this._stampIntialized = true;
    this._refObject.stamp = value;
  }
  get longitude() {
    if (!this._longitudeIntialized) {
      return undefined;
    }
    return this._refObject.longitude;
  }
  set longitude(value) {
    this._longitudeIntialized = true;
    this._refObject.longitude = value;
  }
  get latitude() {
    if (!this._latitudeIntialized) {
      return undefined;
    }
    return this._refObject.latitude;
  }
  set latitude(value) {
    this._latitudeIntialized = true;
    this._refObject.latitude = value;
  }
  get altitude() {
    if (!this._altitudeIntialized) {
      return undefined;
    }
    return this._refObject.altitude;
  }
  set altitude(value) {
    this._altitudeIntialized = true;
    this._refObject.altitude = value;
  }
  get error() {
    if (!this._errorIntialized) {
      return undefined;
    }
    return this._refObject.error;
  }
  set error(value) {
    this._errorIntialized = true;
    this._refObject.error = value;
  }
  get bearing() {
    if (!this._bearingIntialized) {
      return undefined;
    }
    return this._refObject.bearing;
  }
  set bearing(value) {
    this._bearingIntialized = true;
    this._refObject.bearing = value;
  }
  copyRefObject(refObject) {
    this._refObject = new GPSRefStruct(refObject.toObject());
    this._stampIntialized = true;
    this._longitudeIntialized = true;
    this._latitudeIntialized = true;
    this._altitudeIntialized = true;
    this._errorIntialized = true;
    this._bearingIntialized = true;
  }
  copy(other) {
    this._refObject = new GPSRefStruct(other._refObject.toObject());
    this._stampIntialized = true;
    this._longitudeIntialized = true;
    this._latitudeIntialized = true;
    this._altitudeIntialized = true;
    this._errorIntialized = true;
    this._bearingIntialized = true;
  }
  static get classType() {
    return GPSWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"stamp","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"longitude","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"latitude","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"altitude","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"error","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"bearing","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"rtabmap_msgs","type":"GPS","stringUpperBound":null,"isPrimitiveType":false},"msgName":"GPS"};
  }
  hasMember(name) {
    let memberNames = ["stamp","longitude","latitude","altitude","error","bearing"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class GPSArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof GPSWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new GPSWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to GPSArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to GPSArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new GPSRefArray(size);
    this._refObject = new GPSRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new GPSWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof GPSArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "GPSArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      GPSWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return GPSWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return GPSArrayWrapper;
  }
}
module.exports = GPSWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "stamp",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "longitude",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "latitude",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "altitude",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "error",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "bearing",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "rtabmap_msgs",
    "type": "GPS",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "GPS"
}
*/
