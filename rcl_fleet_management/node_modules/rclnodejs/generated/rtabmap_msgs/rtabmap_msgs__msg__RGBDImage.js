// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const HeaderWrapper = require('../../generated/std_msgs/std_msgs__msg__Header.js');
const CameraInfoWrapper = require('../../generated/sensor_msgs/sensor_msgs__msg__CameraInfo.js');
const ImageWrapper = require('../../generated/sensor_msgs/sensor_msgs__msg__Image.js');
const CompressedImageWrapper = require('../../generated/sensor_msgs/sensor_msgs__msg__CompressedImage.js');
const KeyPointWrapper = require('../../generated/rtabmap_msgs/rtabmap_msgs__msg__KeyPoint.js');
const Point3fWrapper = require('../../generated/rtabmap_msgs/rtabmap_msgs__msg__Point3f.js');
const UInt8Wrapper = require('../../generated/std_msgs/std_msgs__msg__UInt8.js');
const GlobalDescriptorWrapper = require('../../generated/rtabmap_msgs/rtabmap_msgs__msg__GlobalDescriptor.js');
const RGBDImageRefStruct = StructType({
  header: HeaderWrapper.refObjectType,
  rgb_camera_info: CameraInfoWrapper.refObjectType,
  depth_camera_info: CameraInfoWrapper.refObjectType,
  rgb: ImageWrapper.refObjectType,
  depth: ImageWrapper.refObjectType,
  rgb_compressed: CompressedImageWrapper.refObjectType,
  depth_compressed: CompressedImageWrapper.refObjectType,
  key_points: KeyPointWrapper.refObjectArrayType,
  points: Point3fWrapper.refObjectArrayType,
  descriptors: UInt8Wrapper.refObjectArrayType,
  global_descriptor: GlobalDescriptorWrapper.refObjectType,
});
const RGBDImageRefArray = ArrayType(RGBDImageRefStruct);
const RGBDImageRefStructArray = StructType({
  data: RGBDImageRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class RGBDImageWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new RGBDImageRefStruct(other._refObject.toObject());
      this._wrapperFields.header =  new HeaderWrapper(other._wrapperFields.header);
      this._wrapperFields.rgb_camera_info =  new CameraInfoWrapper(other._wrapperFields.rgb_camera_info);
      this._wrapperFields.depth_camera_info =  new CameraInfoWrapper(other._wrapperFields.depth_camera_info);
      this._wrapperFields.rgb =  new ImageWrapper(other._wrapperFields.rgb);
      this._wrapperFields.depth =  new ImageWrapper(other._wrapperFields.depth);
      this._wrapperFields.rgb_compressed =  new CompressedImageWrapper(other._wrapperFields.rgb_compressed);
      this._wrapperFields.depth_compressed =  new CompressedImageWrapper(other._wrapperFields.depth_compressed);
      this._wrapperFields.key_points = KeyPointWrapper.createArray();
      this._wrapperFields.key_points.copy(other._wrapperFields.key_points);
      this._wrapperFields.points = Point3fWrapper.createArray();
      this._wrapperFields.points.copy(other._wrapperFields.points);
      this._wrapperFields.descriptors = UInt8Wrapper.createArray();
      this._wrapperFields.descriptors.copy(other._wrapperFields.descriptors);
      this._wrapperFields.global_descriptor =  new GlobalDescriptorWrapper(other._wrapperFields.global_descriptor);
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new RGBDImageRefStruct();
    this._wrapperFields.header = new HeaderWrapper();
    this._wrapperFields.rgb_camera_info = new CameraInfoWrapper();
    this._wrapperFields.depth_camera_info = new CameraInfoWrapper();
    this._wrapperFields.rgb = new ImageWrapper();
    this._wrapperFields.depth = new ImageWrapper();
    this._wrapperFields.rgb_compressed = new CompressedImageWrapper();
    this._wrapperFields.depth_compressed = new CompressedImageWrapper();
    this._wrapperFields.key_points = KeyPointWrapper.createArray();
    this._wrapperFields.points = Point3fWrapper.createArray();
    this._wrapperFields.descriptors = UInt8Wrapper.createArray();
    this._wrapperFields.global_descriptor = new GlobalDescriptorWrapper();
  }
  static createFromRefObject(refObject) {
    let self = new RGBDImageWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new RGBDImageArrayWrapper;
  }
  static get ArrayType() {
    return RGBDImageArrayWrapper;
  }
  static get refObjectArrayType() {
    return RGBDImageRefStructArray
  }
  static get refObjectType() {
    return RGBDImageRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
    this._wrapperFields.header.freeze(own, checkConsistency);
    this._refObject.header = this._wrapperFields.header.refObject;
    this._wrapperFields.rgb_camera_info.freeze(own, checkConsistency);
    this._refObject.rgb_camera_info = this._wrapperFields.rgb_camera_info.refObject;
    this._wrapperFields.depth_camera_info.freeze(own, checkConsistency);
    this._refObject.depth_camera_info = this._wrapperFields.depth_camera_info.refObject;
    this._wrapperFields.rgb.freeze(own, checkConsistency);
    this._refObject.rgb = this._wrapperFields.rgb.refObject;
    this._wrapperFields.depth.freeze(own, checkConsistency);
    this._refObject.depth = this._wrapperFields.depth.refObject;
    this._wrapperFields.rgb_compressed.freeze(own, checkConsistency);
    this._refObject.rgb_compressed = this._wrapperFields.rgb_compressed.refObject;
    this._wrapperFields.depth_compressed.freeze(own, checkConsistency);
    this._refObject.depth_compressed = this._wrapperFields.depth_compressed.refObject;
    this._wrapperFields.key_points.freeze(own, checkConsistency);
    this._refObject.key_points = this._wrapperFields.key_points.refObject;
    this._wrapperFields.points.freeze(own, checkConsistency);
    this._refObject.points = this._wrapperFields.points.refObject;
    this._wrapperFields.descriptors.freeze(own, checkConsistency);
    this._refObject.descriptors = this._wrapperFields.descriptors.refObject;
    if (own) {
      this._wrapperFields.descriptors.fill(Uint8Array.from([]));
      this._wrapperFields.descriptors.freeze(own, checkConsistency);
      this._refObject.descriptors = this._wrapperFields.descriptors.refObject;
    }
    this._wrapperFields.global_descriptor.freeze(own, checkConsistency);
    this._refObject.global_descriptor = this._wrapperFields.global_descriptor.refObject;
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._wrapperFields.header.copyRefObject(refObject.header);
    this._wrapperFields.rgb_camera_info.copyRefObject(refObject.rgb_camera_info);
    this._wrapperFields.depth_camera_info.copyRefObject(refObject.depth_camera_info);
    this._wrapperFields.rgb.copyRefObject(refObject.rgb);
    this._wrapperFields.depth.copyRefObject(refObject.depth);
    this._wrapperFields.rgb_compressed.copyRefObject(refObject.rgb_compressed);
    this._wrapperFields.depth_compressed.copyRefObject(refObject.depth_compressed);
    this._wrapperFields.key_points.copyRefObject(refObject.key_points);
    this._wrapperFields.points.copyRefObject(refObject.points);
    this._wrapperFields.descriptors.copyRefObject(refObject.descriptors);
    this._wrapperFields.global_descriptor.copyRefObject(refObject.global_descriptor);
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    HeaderWrapper.freeStruct(refObject.header);
    CameraInfoWrapper.freeStruct(refObject.rgb_camera_info);
    CameraInfoWrapper.freeStruct(refObject.depth_camera_info);
    ImageWrapper.freeStruct(refObject.rgb);
    ImageWrapper.freeStruct(refObject.depth);
    CompressedImageWrapper.freeStruct(refObject.rgb_compressed);
    CompressedImageWrapper.freeStruct(refObject.depth_compressed);
    if (refObject.key_points.size != 0) {
      KeyPointWrapper.ArrayType.freeArray(refObject.key_points);
      if (KeyPointWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.key_points, KeyPointWrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.points.size != 0) {
      Point3fWrapper.ArrayType.freeArray(refObject.points);
      if (Point3fWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.points, Point3fWrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.descriptors.size != 0) {
      UInt8Wrapper.ArrayType.freeArray(refObject.descriptors);
      if (UInt8Wrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.descriptors, UInt8Wrapper.refObjectArrayType, 'data');
      }
    }
    GlobalDescriptorWrapper.freeStruct(refObject.global_descriptor);
  }
  static destoryRawROS(msg) {
    RGBDImageWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'rtabmap_msgs', subFolder: 'msg', interfaceName: 'RGBDImage'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get header() {
    return this._wrapperFields.header;
  }
  set header(value) {
    if (value instanceof HeaderWrapper) {
      this._wrapperFields.header.copy(value);
    } else {
      this._wrapperFields.header.copy(new HeaderWrapper(value));
    }
  }
  get rgb_camera_info() {
    return this._wrapperFields.rgb_camera_info;
  }
  set rgb_camera_info(value) {
    if (value instanceof CameraInfoWrapper) {
      this._wrapperFields.rgb_camera_info.copy(value);
    } else {
      this._wrapperFields.rgb_camera_info.copy(new CameraInfoWrapper(value));
    }
  }
  get depth_camera_info() {
    return this._wrapperFields.depth_camera_info;
  }
  set depth_camera_info(value) {
    if (value instanceof CameraInfoWrapper) {
      this._wrapperFields.depth_camera_info.copy(value);
    } else {
      this._wrapperFields.depth_camera_info.copy(new CameraInfoWrapper(value));
    }
  }
  get rgb() {
    return this._wrapperFields.rgb;
  }
  set rgb(value) {
    if (value instanceof ImageWrapper) {
      this._wrapperFields.rgb.copy(value);
    } else {
      this._wrapperFields.rgb.copy(new ImageWrapper(value));
    }
  }
  get depth() {
    return this._wrapperFields.depth;
  }
  set depth(value) {
    if (value instanceof ImageWrapper) {
      this._wrapperFields.depth.copy(value);
    } else {
      this._wrapperFields.depth.copy(new ImageWrapper(value));
    }
  }
  get rgb_compressed() {
    return this._wrapperFields.rgb_compressed;
  }
  set rgb_compressed(value) {
    if (value instanceof CompressedImageWrapper) {
      this._wrapperFields.rgb_compressed.copy(value);
    } else {
      this._wrapperFields.rgb_compressed.copy(new CompressedImageWrapper(value));
    }
  }
  get depth_compressed() {
    return this._wrapperFields.depth_compressed;
  }
  set depth_compressed(value) {
    if (value instanceof CompressedImageWrapper) {
      this._wrapperFields.depth_compressed.copy(value);
    } else {
      this._wrapperFields.depth_compressed.copy(new CompressedImageWrapper(value));
    }
  }
  get key_points() {
    return this._wrapperFields.key_points;
  }
  set key_points(value) {
    this._wrapperFields.key_points.fill(value);
  }
  get points() {
    return this._wrapperFields.points;
  }
  set points(value) {
    this._wrapperFields.points.fill(value);
  }
  get descriptors() {
    return this._wrapperFields['descriptors'].data;
  }
  set descriptors(value) {
    this._wrapperFields['descriptors'].fill(value);
  }
  get global_descriptor() {
    return this._wrapperFields.global_descriptor;
  }
  set global_descriptor(value) {
    if (value instanceof GlobalDescriptorWrapper) {
      this._wrapperFields.global_descriptor.copy(value);
    } else {
      this._wrapperFields.global_descriptor.copy(new GlobalDescriptorWrapper(value));
    }
  }
  copyRefObject(refObject) {
    this._refObject = new RGBDImageRefStruct(refObject.toObject());
    this._wrapperFields.header.copyRefObject(this._refObject.header);
    this._wrapperFields.rgb_camera_info.copyRefObject(this._refObject.rgb_camera_info);
    this._wrapperFields.depth_camera_info.copyRefObject(this._refObject.depth_camera_info);
    this._wrapperFields.rgb.copyRefObject(this._refObject.rgb);
    this._wrapperFields.depth.copyRefObject(this._refObject.depth);
    this._wrapperFields.rgb_compressed.copyRefObject(this._refObject.rgb_compressed);
    this._wrapperFields.depth_compressed.copyRefObject(this._refObject.depth_compressed);
    this._wrapperFields.key_points.copyRefObject(this._refObject.key_points);
    this._wrapperFields.points.copyRefObject(this._refObject.points);
    this._wrapperFields.descriptors.copyRefObject(this._refObject.descriptors);
    this._wrapperFields.global_descriptor.copyRefObject(this._refObject.global_descriptor);
  }
  copy(other) {
    this._refObject = new RGBDImageRefStruct(other._refObject.toObject());
    this._wrapperFields.header.copy(other._wrapperFields.header);
    this._wrapperFields.rgb_camera_info.copy(other._wrapperFields.rgb_camera_info);
    this._wrapperFields.depth_camera_info.copy(other._wrapperFields.depth_camera_info);
    this._wrapperFields.rgb.copy(other._wrapperFields.rgb);
    this._wrapperFields.depth.copy(other._wrapperFields.depth);
    this._wrapperFields.rgb_compressed.copy(other._wrapperFields.rgb_compressed);
    this._wrapperFields.depth_compressed.copy(other._wrapperFields.depth_compressed);
    this._wrapperFields.key_points.copy(other._wrapperFields.key_points);
    this._wrapperFields.points.copy(other._wrapperFields.points);
    this._wrapperFields.descriptors.copy(other._wrapperFields.descriptors);
    this._wrapperFields.global_descriptor.copy(other._wrapperFields.global_descriptor);
  }
  static get classType() {
    return RGBDImageWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"header","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"std_msgs","type":"Header","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"rgb_camera_info","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"sensor_msgs","type":"CameraInfo","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"depth_camera_info","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"sensor_msgs","type":"CameraInfo","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"rgb","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"sensor_msgs","type":"Image","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"depth","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"sensor_msgs","type":"Image","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"rgb_compressed","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"sensor_msgs","type":"CompressedImage","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"depth_compressed","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"sensor_msgs","type":"CompressedImage","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"key_points","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":"rtabmap_msgs","type":"KeyPoint","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"points","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":"rtabmap_msgs","type":"Point3f","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"descriptors","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"global_descriptor","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"rtabmap_msgs","type":"GlobalDescriptor","stringUpperBound":null,"isPrimitiveType":false},"default_value":null}],"baseType":{"pkgName":"rtabmap_msgs","type":"RGBDImage","stringUpperBound":null,"isPrimitiveType":false},"msgName":"RGBDImage"};
  }
  hasMember(name) {
    let memberNames = ["header","rgb_camera_info","depth_camera_info","rgb","depth","rgb_compressed","depth_compressed","key_points","points","descriptors","global_descriptor"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class RGBDImageArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof RGBDImageWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new RGBDImageWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to RGBDImageArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to RGBDImageArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new RGBDImageRefArray(size);
    this._refObject = new RGBDImageRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new RGBDImageWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof RGBDImageArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "RGBDImageArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      RGBDImageWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return RGBDImageWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return RGBDImageArrayWrapper;
  }
}
module.exports = RGBDImageWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "header",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "std_msgs",
        "type": "Header",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "rgb_camera_info",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "sensor_msgs",
        "type": "CameraInfo",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "depth_camera_info",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "sensor_msgs",
        "type": "CameraInfo",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "rgb",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "sensor_msgs",
        "type": "Image",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "depth",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "sensor_msgs",
        "type": "Image",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "rgb_compressed",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "sensor_msgs",
        "type": "CompressedImage",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "depth_compressed",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "sensor_msgs",
        "type": "CompressedImage",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "key_points",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": "rtabmap_msgs",
        "type": "KeyPoint",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "points",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": "rtabmap_msgs",
        "type": "Point3f",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "descriptors",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "global_descriptor",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "rtabmap_msgs",
        "type": "GlobalDescriptor",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "rtabmap_msgs",
    "type": "RGBDImage",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "RGBDImage"
}
*/
