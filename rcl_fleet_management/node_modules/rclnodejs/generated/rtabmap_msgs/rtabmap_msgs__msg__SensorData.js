// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const HeaderWrapper = require('../../generated/std_msgs/std_msgs__msg__Header.js');
const ImageWrapper = require('../../generated/sensor_msgs/sensor_msgs__msg__Image.js');
const UInt8Wrapper = require('../../generated/std_msgs/std_msgs__msg__UInt8.js');
const CameraInfoWrapper = require('../../generated/sensor_msgs/sensor_msgs__msg__CameraInfo.js');
const TransformWrapper = require('../../generated/geometry_msgs/geometry_msgs__msg__Transform.js');
const PointCloud2Wrapper = require('../../generated/sensor_msgs/sensor_msgs__msg__PointCloud2.js');
const Point3fWrapper = require('../../generated/rtabmap_msgs/rtabmap_msgs__msg__Point3f.js');
const KeyPointWrapper = require('../../generated/rtabmap_msgs/rtabmap_msgs__msg__KeyPoint.js');
const GlobalDescriptorWrapper = require('../../generated/rtabmap_msgs/rtabmap_msgs__msg__GlobalDescriptor.js');
const EnvSensorWrapper = require('../../generated/rtabmap_msgs/rtabmap_msgs__msg__EnvSensor.js');
const ImuWrapper = require('../../generated/sensor_msgs/sensor_msgs__msg__Imu.js');
const LandmarkDetectionWrapper = require('../../generated/rtabmap_msgs/rtabmap_msgs__msg__LandmarkDetection.js');
const PoseWrapper = require('../../generated/geometry_msgs/geometry_msgs__msg__Pose.js');
const GPSWrapper = require('../../generated/rtabmap_msgs/rtabmap_msgs__msg__GPS.js');
const SensorDataRefStruct = StructType({
  header: HeaderWrapper.refObjectType,
  left: ImageWrapper.refObjectType,
  right: ImageWrapper.refObjectType,
  left_compressed: UInt8Wrapper.refObjectArrayType,
  right_compressed: UInt8Wrapper.refObjectArrayType,
  left_camera_info: CameraInfoWrapper.refObjectArrayType,
  right_camera_info: CameraInfoWrapper.refObjectArrayType,
  local_transform: TransformWrapper.refObjectArrayType,
  laser_scan: PointCloud2Wrapper.refObjectType,
  laser_scan_compressed: UInt8Wrapper.refObjectArrayType,
  laser_scan_max_pts: primitiveTypes.int32,
  laser_scan_max_range: primitiveTypes.float32,
  laser_scan_format: primitiveTypes.int32,
  laser_scan_local_transform: TransformWrapper.refObjectType,
  user_data: UInt8Wrapper.refObjectArrayType,
  grid_ground: UInt8Wrapper.refObjectArrayType,
  grid_obstacles: UInt8Wrapper.refObjectArrayType,
  grid_empty_cells: UInt8Wrapper.refObjectArrayType,
  grid_cell_size: primitiveTypes.float32,
  grid_view_point: Point3fWrapper.refObjectType,
  key_points: KeyPointWrapper.refObjectArrayType,
  points: Point3fWrapper.refObjectArrayType,
  descriptors: UInt8Wrapper.refObjectArrayType,
  global_descriptors: GlobalDescriptorWrapper.refObjectArrayType,
  env_sensors: EnvSensorWrapper.refObjectArrayType,
  imu: ImuWrapper.refObjectType,
  imu_local_transform: TransformWrapper.refObjectType,
  landmarks: LandmarkDetectionWrapper.refObjectArrayType,
  ground_truth_pose: PoseWrapper.refObjectType,
  gps: GPSWrapper.refObjectType,
});
const SensorDataRefArray = ArrayType(SensorDataRefStruct);
const SensorDataRefStructArray = StructType({
  data: SensorDataRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class SensorDataWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new SensorDataRefStruct(other._refObject.toObject());
      this._wrapperFields.header =  new HeaderWrapper(other._wrapperFields.header);
      this._wrapperFields.left =  new ImageWrapper(other._wrapperFields.left);
      this._wrapperFields.right =  new ImageWrapper(other._wrapperFields.right);
      this._wrapperFields.left_compressed = UInt8Wrapper.createArray();
      this._wrapperFields.left_compressed.copy(other._wrapperFields.left_compressed);
      this._wrapperFields.right_compressed = UInt8Wrapper.createArray();
      this._wrapperFields.right_compressed.copy(other._wrapperFields.right_compressed);
      this._wrapperFields.left_camera_info = CameraInfoWrapper.createArray();
      this._wrapperFields.left_camera_info.copy(other._wrapperFields.left_camera_info);
      this._wrapperFields.right_camera_info = CameraInfoWrapper.createArray();
      this._wrapperFields.right_camera_info.copy(other._wrapperFields.right_camera_info);
      this._wrapperFields.local_transform = TransformWrapper.createArray();
      this._wrapperFields.local_transform.copy(other._wrapperFields.local_transform);
      this._wrapperFields.laser_scan =  new PointCloud2Wrapper(other._wrapperFields.laser_scan);
      this._wrapperFields.laser_scan_compressed = UInt8Wrapper.createArray();
      this._wrapperFields.laser_scan_compressed.copy(other._wrapperFields.laser_scan_compressed);
      this._laser_scan_max_ptsIntialized = true;
      this._laser_scan_max_rangeIntialized = true;
      this._laser_scan_formatIntialized = true;
      this._wrapperFields.laser_scan_local_transform =  new TransformWrapper(other._wrapperFields.laser_scan_local_transform);
      this._wrapperFields.user_data = UInt8Wrapper.createArray();
      this._wrapperFields.user_data.copy(other._wrapperFields.user_data);
      this._wrapperFields.grid_ground = UInt8Wrapper.createArray();
      this._wrapperFields.grid_ground.copy(other._wrapperFields.grid_ground);
      this._wrapperFields.grid_obstacles = UInt8Wrapper.createArray();
      this._wrapperFields.grid_obstacles.copy(other._wrapperFields.grid_obstacles);
      this._wrapperFields.grid_empty_cells = UInt8Wrapper.createArray();
      this._wrapperFields.grid_empty_cells.copy(other._wrapperFields.grid_empty_cells);
      this._grid_cell_sizeIntialized = true;
      this._wrapperFields.grid_view_point =  new Point3fWrapper(other._wrapperFields.grid_view_point);
      this._wrapperFields.key_points = KeyPointWrapper.createArray();
      this._wrapperFields.key_points.copy(other._wrapperFields.key_points);
      this._wrapperFields.points = Point3fWrapper.createArray();
      this._wrapperFields.points.copy(other._wrapperFields.points);
      this._wrapperFields.descriptors = UInt8Wrapper.createArray();
      this._wrapperFields.descriptors.copy(other._wrapperFields.descriptors);
      this._wrapperFields.global_descriptors = GlobalDescriptorWrapper.createArray();
      this._wrapperFields.global_descriptors.copy(other._wrapperFields.global_descriptors);
      this._wrapperFields.env_sensors = EnvSensorWrapper.createArray();
      this._wrapperFields.env_sensors.copy(other._wrapperFields.env_sensors);
      this._wrapperFields.imu =  new ImuWrapper(other._wrapperFields.imu);
      this._wrapperFields.imu_local_transform =  new TransformWrapper(other._wrapperFields.imu_local_transform);
      this._wrapperFields.landmarks = LandmarkDetectionWrapper.createArray();
      this._wrapperFields.landmarks.copy(other._wrapperFields.landmarks);
      this._wrapperFields.ground_truth_pose =  new PoseWrapper(other._wrapperFields.ground_truth_pose);
      this._wrapperFields.gps =  new GPSWrapper(other._wrapperFields.gps);
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new SensorDataRefStruct();
    this._wrapperFields.header = new HeaderWrapper();
    this._wrapperFields.left = new ImageWrapper();
    this._wrapperFields.right = new ImageWrapper();
    this._wrapperFields.left_compressed = UInt8Wrapper.createArray();
    this._wrapperFields.right_compressed = UInt8Wrapper.createArray();
    this._wrapperFields.left_camera_info = CameraInfoWrapper.createArray();
    this._wrapperFields.right_camera_info = CameraInfoWrapper.createArray();
    this._wrapperFields.local_transform = TransformWrapper.createArray();
    this._wrapperFields.laser_scan = new PointCloud2Wrapper();
    this._wrapperFields.laser_scan_compressed = UInt8Wrapper.createArray();
    this._laser_scan_max_ptsIntialized = false;
    this._laser_scan_max_rangeIntialized = false;
    this._laser_scan_formatIntialized = false;
    this._wrapperFields.laser_scan_local_transform = new TransformWrapper();
    this._wrapperFields.user_data = UInt8Wrapper.createArray();
    this._wrapperFields.grid_ground = UInt8Wrapper.createArray();
    this._wrapperFields.grid_obstacles = UInt8Wrapper.createArray();
    this._wrapperFields.grid_empty_cells = UInt8Wrapper.createArray();
    this._grid_cell_sizeIntialized = false;
    this._wrapperFields.grid_view_point = new Point3fWrapper();
    this._wrapperFields.key_points = KeyPointWrapper.createArray();
    this._wrapperFields.points = Point3fWrapper.createArray();
    this._wrapperFields.descriptors = UInt8Wrapper.createArray();
    this._wrapperFields.global_descriptors = GlobalDescriptorWrapper.createArray();
    this._wrapperFields.env_sensors = EnvSensorWrapper.createArray();
    this._wrapperFields.imu = new ImuWrapper();
    this._wrapperFields.imu_local_transform = new TransformWrapper();
    this._wrapperFields.landmarks = LandmarkDetectionWrapper.createArray();
    this._wrapperFields.ground_truth_pose = new PoseWrapper();
    this._wrapperFields.gps = new GPSWrapper();
  }
  static createFromRefObject(refObject) {
    let self = new SensorDataWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new SensorDataArrayWrapper;
  }
  static get ArrayType() {
    return SensorDataArrayWrapper;
  }
  static get refObjectArrayType() {
    return SensorDataRefStructArray
  }
  static get refObjectType() {
    return SensorDataRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._laser_scan_max_ptsIntialized) {
        throw new TypeError('Invalid argument: laser_scan_max_pts in SensorData');
      }
      if (checkConsistency && !this._laser_scan_max_rangeIntialized) {
        throw new TypeError('Invalid argument: laser_scan_max_range in SensorData');
      }
      if (checkConsistency && !this._laser_scan_formatIntialized) {
        throw new TypeError('Invalid argument: laser_scan_format in SensorData');
      }
      if (checkConsistency && !this._grid_cell_sizeIntialized) {
        throw new TypeError('Invalid argument: grid_cell_size in SensorData');
      }
    this._wrapperFields.header.freeze(own, checkConsistency);
    this._refObject.header = this._wrapperFields.header.refObject;
    this._wrapperFields.left.freeze(own, checkConsistency);
    this._refObject.left = this._wrapperFields.left.refObject;
    this._wrapperFields.right.freeze(own, checkConsistency);
    this._refObject.right = this._wrapperFields.right.refObject;
    this._wrapperFields.left_compressed.freeze(own, checkConsistency);
    this._refObject.left_compressed = this._wrapperFields.left_compressed.refObject;
    if (own) {
      this._wrapperFields.left_compressed.fill(Uint8Array.from([]));
      this._wrapperFields.left_compressed.freeze(own, checkConsistency);
      this._refObject.left_compressed = this._wrapperFields.left_compressed.refObject;
    }
    this._wrapperFields.right_compressed.freeze(own, checkConsistency);
    this._refObject.right_compressed = this._wrapperFields.right_compressed.refObject;
    if (own) {
      this._wrapperFields.right_compressed.fill(Uint8Array.from([]));
      this._wrapperFields.right_compressed.freeze(own, checkConsistency);
      this._refObject.right_compressed = this._wrapperFields.right_compressed.refObject;
    }
    this._wrapperFields.left_camera_info.freeze(own, checkConsistency);
    this._refObject.left_camera_info = this._wrapperFields.left_camera_info.refObject;
    this._wrapperFields.right_camera_info.freeze(own, checkConsistency);
    this._refObject.right_camera_info = this._wrapperFields.right_camera_info.refObject;
    this._wrapperFields.local_transform.freeze(own, checkConsistency);
    this._refObject.local_transform = this._wrapperFields.local_transform.refObject;
    this._wrapperFields.laser_scan.freeze(own, checkConsistency);
    this._refObject.laser_scan = this._wrapperFields.laser_scan.refObject;
    this._wrapperFields.laser_scan_compressed.freeze(own, checkConsistency);
    this._refObject.laser_scan_compressed = this._wrapperFields.laser_scan_compressed.refObject;
    if (own) {
      this._wrapperFields.laser_scan_compressed.fill(Uint8Array.from([]));
      this._wrapperFields.laser_scan_compressed.freeze(own, checkConsistency);
      this._refObject.laser_scan_compressed = this._wrapperFields.laser_scan_compressed.refObject;
    }
    this._wrapperFields.laser_scan_local_transform.freeze(own, checkConsistency);
    this._refObject.laser_scan_local_transform = this._wrapperFields.laser_scan_local_transform.refObject;
    this._wrapperFields.user_data.freeze(own, checkConsistency);
    this._refObject.user_data = this._wrapperFields.user_data.refObject;
    if (own) {
      this._wrapperFields.user_data.fill(Uint8Array.from([]));
      this._wrapperFields.user_data.freeze(own, checkConsistency);
      this._refObject.user_data = this._wrapperFields.user_data.refObject;
    }
    this._wrapperFields.grid_ground.freeze(own, checkConsistency);
    this._refObject.grid_ground = this._wrapperFields.grid_ground.refObject;
    if (own) {
      this._wrapperFields.grid_ground.fill(Uint8Array.from([]));
      this._wrapperFields.grid_ground.freeze(own, checkConsistency);
      this._refObject.grid_ground = this._wrapperFields.grid_ground.refObject;
    }
    this._wrapperFields.grid_obstacles.freeze(own, checkConsistency);
    this._refObject.grid_obstacles = this._wrapperFields.grid_obstacles.refObject;
    if (own) {
      this._wrapperFields.grid_obstacles.fill(Uint8Array.from([]));
      this._wrapperFields.grid_obstacles.freeze(own, checkConsistency);
      this._refObject.grid_obstacles = this._wrapperFields.grid_obstacles.refObject;
    }
    this._wrapperFields.grid_empty_cells.freeze(own, checkConsistency);
    this._refObject.grid_empty_cells = this._wrapperFields.grid_empty_cells.refObject;
    if (own) {
      this._wrapperFields.grid_empty_cells.fill(Uint8Array.from([]));
      this._wrapperFields.grid_empty_cells.freeze(own, checkConsistency);
      this._refObject.grid_empty_cells = this._wrapperFields.grid_empty_cells.refObject;
    }
    this._wrapperFields.grid_view_point.freeze(own, checkConsistency);
    this._refObject.grid_view_point = this._wrapperFields.grid_view_point.refObject;
    this._wrapperFields.key_points.freeze(own, checkConsistency);
    this._refObject.key_points = this._wrapperFields.key_points.refObject;
    this._wrapperFields.points.freeze(own, checkConsistency);
    this._refObject.points = this._wrapperFields.points.refObject;
    this._wrapperFields.descriptors.freeze(own, checkConsistency);
    this._refObject.descriptors = this._wrapperFields.descriptors.refObject;
    if (own) {
      this._wrapperFields.descriptors.fill(Uint8Array.from([]));
      this._wrapperFields.descriptors.freeze(own, checkConsistency);
      this._refObject.descriptors = this._wrapperFields.descriptors.refObject;
    }
    this._wrapperFields.global_descriptors.freeze(own, checkConsistency);
    this._refObject.global_descriptors = this._wrapperFields.global_descriptors.refObject;
    this._wrapperFields.env_sensors.freeze(own, checkConsistency);
    this._refObject.env_sensors = this._wrapperFields.env_sensors.refObject;
    this._wrapperFields.imu.freeze(own, checkConsistency);
    this._refObject.imu = this._wrapperFields.imu.refObject;
    this._wrapperFields.imu_local_transform.freeze(own, checkConsistency);
    this._refObject.imu_local_transform = this._wrapperFields.imu_local_transform.refObject;
    this._wrapperFields.landmarks.freeze(own, checkConsistency);
    this._refObject.landmarks = this._wrapperFields.landmarks.refObject;
    this._wrapperFields.ground_truth_pose.freeze(own, checkConsistency);
    this._refObject.ground_truth_pose = this._wrapperFields.ground_truth_pose.refObject;
    this._wrapperFields.gps.freeze(own, checkConsistency);
    this._refObject.gps = this._wrapperFields.gps.refObject;
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._wrapperFields.header.copyRefObject(refObject.header);
    this._wrapperFields.left.copyRefObject(refObject.left);
    this._wrapperFields.right.copyRefObject(refObject.right);
    this._wrapperFields.left_compressed.copyRefObject(refObject.left_compressed);
    this._wrapperFields.right_compressed.copyRefObject(refObject.right_compressed);
    this._wrapperFields.left_camera_info.copyRefObject(refObject.left_camera_info);
    this._wrapperFields.right_camera_info.copyRefObject(refObject.right_camera_info);
    this._wrapperFields.local_transform.copyRefObject(refObject.local_transform);
    this._wrapperFields.laser_scan.copyRefObject(refObject.laser_scan);
    this._wrapperFields.laser_scan_compressed.copyRefObject(refObject.laser_scan_compressed);
    this._laser_scan_max_ptsIntialized = true;
    this._refObject.laser_scan_max_pts = refObject.laser_scan_max_pts;
    this._laser_scan_max_rangeIntialized = true;
    this._refObject.laser_scan_max_range = refObject.laser_scan_max_range;
    this._laser_scan_formatIntialized = true;
    this._refObject.laser_scan_format = refObject.laser_scan_format;
    this._wrapperFields.laser_scan_local_transform.copyRefObject(refObject.laser_scan_local_transform);
    this._wrapperFields.user_data.copyRefObject(refObject.user_data);
    this._wrapperFields.grid_ground.copyRefObject(refObject.grid_ground);
    this._wrapperFields.grid_obstacles.copyRefObject(refObject.grid_obstacles);
    this._wrapperFields.grid_empty_cells.copyRefObject(refObject.grid_empty_cells);
    this._grid_cell_sizeIntialized = true;
    this._refObject.grid_cell_size = refObject.grid_cell_size;
    this._wrapperFields.grid_view_point.copyRefObject(refObject.grid_view_point);
    this._wrapperFields.key_points.copyRefObject(refObject.key_points);
    this._wrapperFields.points.copyRefObject(refObject.points);
    this._wrapperFields.descriptors.copyRefObject(refObject.descriptors);
    this._wrapperFields.global_descriptors.copyRefObject(refObject.global_descriptors);
    this._wrapperFields.env_sensors.copyRefObject(refObject.env_sensors);
    this._wrapperFields.imu.copyRefObject(refObject.imu);
    this._wrapperFields.imu_local_transform.copyRefObject(refObject.imu_local_transform);
    this._wrapperFields.landmarks.copyRefObject(refObject.landmarks);
    this._wrapperFields.ground_truth_pose.copyRefObject(refObject.ground_truth_pose);
    this._wrapperFields.gps.copyRefObject(refObject.gps);
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    HeaderWrapper.freeStruct(refObject.header);
    ImageWrapper.freeStruct(refObject.left);
    ImageWrapper.freeStruct(refObject.right);
    if (refObject.left_compressed.size != 0) {
      UInt8Wrapper.ArrayType.freeArray(refObject.left_compressed);
      if (UInt8Wrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.left_compressed, UInt8Wrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.right_compressed.size != 0) {
      UInt8Wrapper.ArrayType.freeArray(refObject.right_compressed);
      if (UInt8Wrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.right_compressed, UInt8Wrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.left_camera_info.size != 0) {
      CameraInfoWrapper.ArrayType.freeArray(refObject.left_camera_info);
      if (CameraInfoWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.left_camera_info, CameraInfoWrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.right_camera_info.size != 0) {
      CameraInfoWrapper.ArrayType.freeArray(refObject.right_camera_info);
      if (CameraInfoWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.right_camera_info, CameraInfoWrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.local_transform.size != 0) {
      TransformWrapper.ArrayType.freeArray(refObject.local_transform);
      if (TransformWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.local_transform, TransformWrapper.refObjectArrayType, 'data');
      }
    }
    PointCloud2Wrapper.freeStruct(refObject.laser_scan);
    if (refObject.laser_scan_compressed.size != 0) {
      UInt8Wrapper.ArrayType.freeArray(refObject.laser_scan_compressed);
      if (UInt8Wrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.laser_scan_compressed, UInt8Wrapper.refObjectArrayType, 'data');
      }
    }
    TransformWrapper.freeStruct(refObject.laser_scan_local_transform);
    if (refObject.user_data.size != 0) {
      UInt8Wrapper.ArrayType.freeArray(refObject.user_data);
      if (UInt8Wrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.user_data, UInt8Wrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.grid_ground.size != 0) {
      UInt8Wrapper.ArrayType.freeArray(refObject.grid_ground);
      if (UInt8Wrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.grid_ground, UInt8Wrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.grid_obstacles.size != 0) {
      UInt8Wrapper.ArrayType.freeArray(refObject.grid_obstacles);
      if (UInt8Wrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.grid_obstacles, UInt8Wrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.grid_empty_cells.size != 0) {
      UInt8Wrapper.ArrayType.freeArray(refObject.grid_empty_cells);
      if (UInt8Wrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.grid_empty_cells, UInt8Wrapper.refObjectArrayType, 'data');
      }
    }
    Point3fWrapper.freeStruct(refObject.grid_view_point);
    if (refObject.key_points.size != 0) {
      KeyPointWrapper.ArrayType.freeArray(refObject.key_points);
      if (KeyPointWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.key_points, KeyPointWrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.points.size != 0) {
      Point3fWrapper.ArrayType.freeArray(refObject.points);
      if (Point3fWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.points, Point3fWrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.descriptors.size != 0) {
      UInt8Wrapper.ArrayType.freeArray(refObject.descriptors);
      if (UInt8Wrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.descriptors, UInt8Wrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.global_descriptors.size != 0) {
      GlobalDescriptorWrapper.ArrayType.freeArray(refObject.global_descriptors);
      if (GlobalDescriptorWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.global_descriptors, GlobalDescriptorWrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.env_sensors.size != 0) {
      EnvSensorWrapper.ArrayType.freeArray(refObject.env_sensors);
      if (EnvSensorWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.env_sensors, EnvSensorWrapper.refObjectArrayType, 'data');
      }
    }
    ImuWrapper.freeStruct(refObject.imu);
    TransformWrapper.freeStruct(refObject.imu_local_transform);
    if (refObject.landmarks.size != 0) {
      LandmarkDetectionWrapper.ArrayType.freeArray(refObject.landmarks);
      if (LandmarkDetectionWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.landmarks, LandmarkDetectionWrapper.refObjectArrayType, 'data');
      }
    }
    PoseWrapper.freeStruct(refObject.ground_truth_pose);
    GPSWrapper.freeStruct(refObject.gps);
  }
  static destoryRawROS(msg) {
    SensorDataWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'rtabmap_msgs', subFolder: 'msg', interfaceName: 'SensorData'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get header() {
    return this._wrapperFields.header;
  }
  set header(value) {
    if (value instanceof HeaderWrapper) {
      this._wrapperFields.header.copy(value);
    } else {
      this._wrapperFields.header.copy(new HeaderWrapper(value));
    }
  }
  get left() {
    return this._wrapperFields.left;
  }
  set left(value) {
    if (value instanceof ImageWrapper) {
      this._wrapperFields.left.copy(value);
    } else {
      this._wrapperFields.left.copy(new ImageWrapper(value));
    }
  }
  get right() {
    return this._wrapperFields.right;
  }
  set right(value) {
    if (value instanceof ImageWrapper) {
      this._wrapperFields.right.copy(value);
    } else {
      this._wrapperFields.right.copy(new ImageWrapper(value));
    }
  }
  get left_compressed() {
    return this._wrapperFields['left_compressed'].data;
  }
  set left_compressed(value) {
    this._wrapperFields['left_compressed'].fill(value);
  }
  get right_compressed() {
    return this._wrapperFields['right_compressed'].data;
  }
  set right_compressed(value) {
    this._wrapperFields['right_compressed'].fill(value);
  }
  get left_camera_info() {
    return this._wrapperFields.left_camera_info;
  }
  set left_camera_info(value) {
    this._wrapperFields.left_camera_info.fill(value);
  }
  get right_camera_info() {
    return this._wrapperFields.right_camera_info;
  }
  set right_camera_info(value) {
    this._wrapperFields.right_camera_info.fill(value);
  }
  get local_transform() {
    return this._wrapperFields.local_transform;
  }
  set local_transform(value) {
    this._wrapperFields.local_transform.fill(value);
  }
  get laser_scan() {
    return this._wrapperFields.laser_scan;
  }
  set laser_scan(value) {
    if (value instanceof PointCloud2Wrapper) {
      this._wrapperFields.laser_scan.copy(value);
    } else {
      this._wrapperFields.laser_scan.copy(new PointCloud2Wrapper(value));
    }
  }
  get laser_scan_compressed() {
    return this._wrapperFields['laser_scan_compressed'].data;
  }
  set laser_scan_compressed(value) {
    this._wrapperFields['laser_scan_compressed'].fill(value);
  }
  get laser_scan_max_pts() {
    if (!this._laser_scan_max_ptsIntialized) {
      return undefined;
    }
    return this._refObject.laser_scan_max_pts;
  }
  set laser_scan_max_pts(value) {
    this._laser_scan_max_ptsIntialized = true;
    this._refObject.laser_scan_max_pts = value;
  }
  get laser_scan_max_range() {
    if (!this._laser_scan_max_rangeIntialized) {
      return undefined;
    }
    return this._refObject.laser_scan_max_range;
  }
  set laser_scan_max_range(value) {
    this._laser_scan_max_rangeIntialized = true;
    this._refObject.laser_scan_max_range = value;
  }
  get laser_scan_format() {
    if (!this._laser_scan_formatIntialized) {
      return undefined;
    }
    return this._refObject.laser_scan_format;
  }
  set laser_scan_format(value) {
    this._laser_scan_formatIntialized = true;
    this._refObject.laser_scan_format = value;
  }
  get laser_scan_local_transform() {
    return this._wrapperFields.laser_scan_local_transform;
  }
  set laser_scan_local_transform(value) {
    if (value instanceof TransformWrapper) {
      this._wrapperFields.laser_scan_local_transform.copy(value);
    } else {
      this._wrapperFields.laser_scan_local_transform.copy(new TransformWrapper(value));
    }
  }
  get user_data() {
    return this._wrapperFields['user_data'].data;
  }
  set user_data(value) {
    this._wrapperFields['user_data'].fill(value);
  }
  get grid_ground() {
    return this._wrapperFields['grid_ground'].data;
  }
  set grid_ground(value) {
    this._wrapperFields['grid_ground'].fill(value);
  }
  get grid_obstacles() {
    return this._wrapperFields['grid_obstacles'].data;
  }
  set grid_obstacles(value) {
    this._wrapperFields['grid_obstacles'].fill(value);
  }
  get grid_empty_cells() {
    return this._wrapperFields['grid_empty_cells'].data;
  }
  set grid_empty_cells(value) {
    this._wrapperFields['grid_empty_cells'].fill(value);
  }
  get grid_cell_size() {
    if (!this._grid_cell_sizeIntialized) {
      return undefined;
    }
    return this._refObject.grid_cell_size;
  }
  set grid_cell_size(value) {
    this._grid_cell_sizeIntialized = true;
    this._refObject.grid_cell_size = value;
  }
  get grid_view_point() {
    return this._wrapperFields.grid_view_point;
  }
  set grid_view_point(value) {
    if (value instanceof Point3fWrapper) {
      this._wrapperFields.grid_view_point.copy(value);
    } else {
      this._wrapperFields.grid_view_point.copy(new Point3fWrapper(value));
    }
  }
  get key_points() {
    return this._wrapperFields.key_points;
  }
  set key_points(value) {
    this._wrapperFields.key_points.fill(value);
  }
  get points() {
    return this._wrapperFields.points;
  }
  set points(value) {
    this._wrapperFields.points.fill(value);
  }
  get descriptors() {
    return this._wrapperFields['descriptors'].data;
  }
  set descriptors(value) {
    this._wrapperFields['descriptors'].fill(value);
  }
  get global_descriptors() {
    return this._wrapperFields.global_descriptors;
  }
  set global_descriptors(value) {
    this._wrapperFields.global_descriptors.fill(value);
  }
  get env_sensors() {
    return this._wrapperFields.env_sensors;
  }
  set env_sensors(value) {
    this._wrapperFields.env_sensors.fill(value);
  }
  get imu() {
    return this._wrapperFields.imu;
  }
  set imu(value) {
    if (value instanceof ImuWrapper) {
      this._wrapperFields.imu.copy(value);
    } else {
      this._wrapperFields.imu.copy(new ImuWrapper(value));
    }
  }
  get imu_local_transform() {
    return this._wrapperFields.imu_local_transform;
  }
  set imu_local_transform(value) {
    if (value instanceof TransformWrapper) {
      this._wrapperFields.imu_local_transform.copy(value);
    } else {
      this._wrapperFields.imu_local_transform.copy(new TransformWrapper(value));
    }
  }
  get landmarks() {
    return this._wrapperFields.landmarks;
  }
  set landmarks(value) {
    this._wrapperFields.landmarks.fill(value);
  }
  get ground_truth_pose() {
    return this._wrapperFields.ground_truth_pose;
  }
  set ground_truth_pose(value) {
    if (value instanceof PoseWrapper) {
      this._wrapperFields.ground_truth_pose.copy(value);
    } else {
      this._wrapperFields.ground_truth_pose.copy(new PoseWrapper(value));
    }
  }
  get gps() {
    return this._wrapperFields.gps;
  }
  set gps(value) {
    if (value instanceof GPSWrapper) {
      this._wrapperFields.gps.copy(value);
    } else {
      this._wrapperFields.gps.copy(new GPSWrapper(value));
    }
  }
  copyRefObject(refObject) {
    this._refObject = new SensorDataRefStruct(refObject.toObject());
    this._wrapperFields.header.copyRefObject(this._refObject.header);
    this._wrapperFields.left.copyRefObject(this._refObject.left);
    this._wrapperFields.right.copyRefObject(this._refObject.right);
    this._wrapperFields.left_compressed.copyRefObject(this._refObject.left_compressed);
    this._wrapperFields.right_compressed.copyRefObject(this._refObject.right_compressed);
    this._wrapperFields.left_camera_info.copyRefObject(this._refObject.left_camera_info);
    this._wrapperFields.right_camera_info.copyRefObject(this._refObject.right_camera_info);
    this._wrapperFields.local_transform.copyRefObject(this._refObject.local_transform);
    this._wrapperFields.laser_scan.copyRefObject(this._refObject.laser_scan);
    this._wrapperFields.laser_scan_compressed.copyRefObject(this._refObject.laser_scan_compressed);
    this._laser_scan_max_ptsIntialized = true;
    this._laser_scan_max_rangeIntialized = true;
    this._laser_scan_formatIntialized = true;
    this._wrapperFields.laser_scan_local_transform.copyRefObject(this._refObject.laser_scan_local_transform);
    this._wrapperFields.user_data.copyRefObject(this._refObject.user_data);
    this._wrapperFields.grid_ground.copyRefObject(this._refObject.grid_ground);
    this._wrapperFields.grid_obstacles.copyRefObject(this._refObject.grid_obstacles);
    this._wrapperFields.grid_empty_cells.copyRefObject(this._refObject.grid_empty_cells);
    this._grid_cell_sizeIntialized = true;
    this._wrapperFields.grid_view_point.copyRefObject(this._refObject.grid_view_point);
    this._wrapperFields.key_points.copyRefObject(this._refObject.key_points);
    this._wrapperFields.points.copyRefObject(this._refObject.points);
    this._wrapperFields.descriptors.copyRefObject(this._refObject.descriptors);
    this._wrapperFields.global_descriptors.copyRefObject(this._refObject.global_descriptors);
    this._wrapperFields.env_sensors.copyRefObject(this._refObject.env_sensors);
    this._wrapperFields.imu.copyRefObject(this._refObject.imu);
    this._wrapperFields.imu_local_transform.copyRefObject(this._refObject.imu_local_transform);
    this._wrapperFields.landmarks.copyRefObject(this._refObject.landmarks);
    this._wrapperFields.ground_truth_pose.copyRefObject(this._refObject.ground_truth_pose);
    this._wrapperFields.gps.copyRefObject(this._refObject.gps);
  }
  copy(other) {
    this._refObject = new SensorDataRefStruct(other._refObject.toObject());
    this._wrapperFields.header.copy(other._wrapperFields.header);
    this._wrapperFields.left.copy(other._wrapperFields.left);
    this._wrapperFields.right.copy(other._wrapperFields.right);
    this._wrapperFields.left_compressed.copy(other._wrapperFields.left_compressed);
    this._wrapperFields.right_compressed.copy(other._wrapperFields.right_compressed);
    this._wrapperFields.left_camera_info.copy(other._wrapperFields.left_camera_info);
    this._wrapperFields.right_camera_info.copy(other._wrapperFields.right_camera_info);
    this._wrapperFields.local_transform.copy(other._wrapperFields.local_transform);
    this._wrapperFields.laser_scan.copy(other._wrapperFields.laser_scan);
    this._wrapperFields.laser_scan_compressed.copy(other._wrapperFields.laser_scan_compressed);
    this._laser_scan_max_ptsIntialized = true;
    this._laser_scan_max_rangeIntialized = true;
    this._laser_scan_formatIntialized = true;
    this._wrapperFields.laser_scan_local_transform.copy(other._wrapperFields.laser_scan_local_transform);
    this._wrapperFields.user_data.copy(other._wrapperFields.user_data);
    this._wrapperFields.grid_ground.copy(other._wrapperFields.grid_ground);
    this._wrapperFields.grid_obstacles.copy(other._wrapperFields.grid_obstacles);
    this._wrapperFields.grid_empty_cells.copy(other._wrapperFields.grid_empty_cells);
    this._grid_cell_sizeIntialized = true;
    this._wrapperFields.grid_view_point.copy(other._wrapperFields.grid_view_point);
    this._wrapperFields.key_points.copy(other._wrapperFields.key_points);
    this._wrapperFields.points.copy(other._wrapperFields.points);
    this._wrapperFields.descriptors.copy(other._wrapperFields.descriptors);
    this._wrapperFields.global_descriptors.copy(other._wrapperFields.global_descriptors);
    this._wrapperFields.env_sensors.copy(other._wrapperFields.env_sensors);
    this._wrapperFields.imu.copy(other._wrapperFields.imu);
    this._wrapperFields.imu_local_transform.copy(other._wrapperFields.imu_local_transform);
    this._wrapperFields.landmarks.copy(other._wrapperFields.landmarks);
    this._wrapperFields.ground_truth_pose.copy(other._wrapperFields.ground_truth_pose);
    this._wrapperFields.gps.copy(other._wrapperFields.gps);
  }
  static get classType() {
    return SensorDataWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"header","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"std_msgs","type":"Header","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"left","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"sensor_msgs","type":"Image","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"right","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"sensor_msgs","type":"Image","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"left_compressed","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"right_compressed","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"left_camera_info","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":"sensor_msgs","type":"CameraInfo","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"right_camera_info","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":"sensor_msgs","type":"CameraInfo","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"local_transform","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":"geometry_msgs","type":"Transform","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"laser_scan","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"sensor_msgs","type":"PointCloud2","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"laser_scan_compressed","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"laser_scan_max_pts","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"int32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"laser_scan_max_range","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"laser_scan_format","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"int32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"laser_scan_local_transform","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"geometry_msgs","type":"Transform","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"user_data","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"grid_ground","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"grid_obstacles","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"grid_empty_cells","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"grid_cell_size","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"grid_view_point","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"rtabmap_msgs","type":"Point3f","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"key_points","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":"rtabmap_msgs","type":"KeyPoint","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"points","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":"rtabmap_msgs","type":"Point3f","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"descriptors","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"global_descriptors","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":"rtabmap_msgs","type":"GlobalDescriptor","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"env_sensors","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":"rtabmap_msgs","type":"EnvSensor","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"imu","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"sensor_msgs","type":"Imu","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"imu_local_transform","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"geometry_msgs","type":"Transform","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"landmarks","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":"rtabmap_msgs","type":"LandmarkDetection","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"ground_truth_pose","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"geometry_msgs","type":"Pose","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"gps","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"rtabmap_msgs","type":"GPS","stringUpperBound":null,"isPrimitiveType":false},"default_value":null}],"baseType":{"pkgName":"rtabmap_msgs","type":"SensorData","stringUpperBound":null,"isPrimitiveType":false},"msgName":"SensorData"};
  }
  hasMember(name) {
    let memberNames = ["header","left","right","left_compressed","right_compressed","left_camera_info","right_camera_info","local_transform","laser_scan","laser_scan_compressed","laser_scan_max_pts","laser_scan_max_range","laser_scan_format","laser_scan_local_transform","user_data","grid_ground","grid_obstacles","grid_empty_cells","grid_cell_size","grid_view_point","key_points","points","descriptors","global_descriptors","env_sensors","imu","imu_local_transform","landmarks","ground_truth_pose","gps"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class SensorDataArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof SensorDataWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new SensorDataWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to SensorDataArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to SensorDataArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new SensorDataRefArray(size);
    this._refObject = new SensorDataRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new SensorDataWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof SensorDataArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "SensorDataArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      SensorDataWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return SensorDataWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return SensorDataArrayWrapper;
  }
}
module.exports = SensorDataWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "header",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "std_msgs",
        "type": "Header",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "left",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "sensor_msgs",
        "type": "Image",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "right",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "sensor_msgs",
        "type": "Image",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "left_compressed",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "right_compressed",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "left_camera_info",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": "sensor_msgs",
        "type": "CameraInfo",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "right_camera_info",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": "sensor_msgs",
        "type": "CameraInfo",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "local_transform",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": "geometry_msgs",
        "type": "Transform",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "laser_scan",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "sensor_msgs",
        "type": "PointCloud2",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "laser_scan_compressed",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "laser_scan_max_pts",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "int32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "laser_scan_max_range",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "laser_scan_format",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "int32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "laser_scan_local_transform",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "geometry_msgs",
        "type": "Transform",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "user_data",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "grid_ground",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "grid_obstacles",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "grid_empty_cells",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "grid_cell_size",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "grid_view_point",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "rtabmap_msgs",
        "type": "Point3f",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "key_points",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": "rtabmap_msgs",
        "type": "KeyPoint",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "points",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": "rtabmap_msgs",
        "type": "Point3f",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "descriptors",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "global_descriptors",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": "rtabmap_msgs",
        "type": "GlobalDescriptor",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "env_sensors",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": "rtabmap_msgs",
        "type": "EnvSensor",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "imu",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "sensor_msgs",
        "type": "Imu",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "imu_local_transform",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "geometry_msgs",
        "type": "Transform",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "landmarks",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": "rtabmap_msgs",
        "type": "LandmarkDetection",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "ground_truth_pose",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "geometry_msgs",
        "type": "Pose",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "gps",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "rtabmap_msgs",
        "type": "GPS",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "rtabmap_msgs",
    "type": "SensorData",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "SensorData"
}
*/
