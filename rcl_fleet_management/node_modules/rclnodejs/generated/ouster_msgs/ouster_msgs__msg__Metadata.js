// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const StringWrapper = require('../../generated/std_msgs/std_msgs__msg__String.js');
const Float64Wrapper = require('../../generated/std_msgs/std_msgs__msg__Float64.js');
const MetadataRefStruct = StructType({
  hostname: primitiveTypes.string,
  lidar_mode: primitiveTypes.string,
  timestamp_mode: primitiveTypes.string,
  beam_azimuth_angles: Float64Wrapper.refObjectArrayType,
  beam_altitude_angles: Float64Wrapper.refObjectArrayType,
  imu_to_sensor_transform: Float64Wrapper.refObjectArrayType,
  lidar_to_sensor_transform: Float64Wrapper.refObjectArrayType,
  serial_no: primitiveTypes.string,
  firmware_rev: primitiveTypes.string,
  imu_port: primitiveTypes.int8,
  lidar_port: primitiveTypes.int8,
});
const MetadataRefArray = ArrayType(MetadataRefStruct);
const MetadataRefStructArray = StructType({
  data: MetadataRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class MetadataWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new MetadataRefStruct(other._refObject.toObject());
      this._hostnameIntialized = true;
      this._wrapperFields.hostname =  new StringWrapper(other._wrapperFields.hostname);
      this._lidar_modeIntialized = true;
      this._wrapperFields.lidar_mode =  new StringWrapper(other._wrapperFields.lidar_mode);
      this._timestamp_modeIntialized = true;
      this._wrapperFields.timestamp_mode =  new StringWrapper(other._wrapperFields.timestamp_mode);
      this._wrapperFields.beam_azimuth_angles = Float64Wrapper.createArray();
      this._wrapperFields.beam_azimuth_angles.copy(other._wrapperFields.beam_azimuth_angles);
      this._wrapperFields.beam_altitude_angles = Float64Wrapper.createArray();
      this._wrapperFields.beam_altitude_angles.copy(other._wrapperFields.beam_altitude_angles);
      this._wrapperFields.imu_to_sensor_transform = Float64Wrapper.createArray();
      this._wrapperFields.imu_to_sensor_transform.copy(other._wrapperFields.imu_to_sensor_transform);
      this._wrapperFields.lidar_to_sensor_transform = Float64Wrapper.createArray();
      this._wrapperFields.lidar_to_sensor_transform.copy(other._wrapperFields.lidar_to_sensor_transform);
      this._serial_noIntialized = true;
      this._wrapperFields.serial_no =  new StringWrapper(other._wrapperFields.serial_no);
      this._firmware_revIntialized = true;
      this._wrapperFields.firmware_rev =  new StringWrapper(other._wrapperFields.firmware_rev);
      this._imu_portIntialized = true;
      this._lidar_portIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new MetadataRefStruct();
    this._hostnameIntialized = false;
    this._wrapperFields.hostname = new StringWrapper();
    this._lidar_modeIntialized = false;
    this._wrapperFields.lidar_mode = new StringWrapper();
    this._timestamp_modeIntialized = false;
    this._wrapperFields.timestamp_mode = new StringWrapper();
    this._wrapperFields.beam_azimuth_angles = Float64Wrapper.createArray();
    this._wrapperFields.beam_altitude_angles = Float64Wrapper.createArray();
    this._wrapperFields.imu_to_sensor_transform = Float64Wrapper.createArray();
    this._wrapperFields.lidar_to_sensor_transform = Float64Wrapper.createArray();
    this._serial_noIntialized = false;
    this._wrapperFields.serial_no = new StringWrapper();
    this._firmware_revIntialized = false;
    this._wrapperFields.firmware_rev = new StringWrapper();
    this._imu_portIntialized = false;
    this._lidar_portIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new MetadataWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new MetadataArrayWrapper;
  }
  static get ArrayType() {
    return MetadataArrayWrapper;
  }
  static get refObjectArrayType() {
    return MetadataRefStructArray
  }
  static get refObjectType() {
    return MetadataRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._hostnameIntialized) {
        throw new TypeError('Invalid argument: hostname in Metadata');
      }
      if (checkConsistency && !this._lidar_modeIntialized) {
        throw new TypeError('Invalid argument: lidar_mode in Metadata');
      }
      if (checkConsistency && !this._timestamp_modeIntialized) {
        throw new TypeError('Invalid argument: timestamp_mode in Metadata');
      }
      if (checkConsistency && !this._serial_noIntialized) {
        throw new TypeError('Invalid argument: serial_no in Metadata');
      }
      if (checkConsistency && !this._firmware_revIntialized) {
        throw new TypeError('Invalid argument: firmware_rev in Metadata');
      }
      if (checkConsistency && !this._imu_portIntialized) {
        throw new TypeError('Invalid argument: imu_port in Metadata');
      }
      if (checkConsistency && !this._lidar_portIntialized) {
        throw new TypeError('Invalid argument: lidar_port in Metadata');
      }
    if (own) {
      this._wrapperFields.hostname.freeze(own, checkConsistency);
    }
    this._refObject.hostname = this._wrapperFields.hostname.refObject;
    if (own) {
      this._wrapperFields.lidar_mode.freeze(own, checkConsistency);
    }
    this._refObject.lidar_mode = this._wrapperFields.lidar_mode.refObject;
    if (own) {
      this._wrapperFields.timestamp_mode.freeze(own, checkConsistency);
    }
    this._refObject.timestamp_mode = this._wrapperFields.timestamp_mode.refObject;
    this._wrapperFields.beam_azimuth_angles.freeze(own, checkConsistency);
    this._refObject.beam_azimuth_angles = this._wrapperFields.beam_azimuth_angles.refObject;
    if (own) {
      this._wrapperFields.beam_azimuth_angles.fill(Float64Array.from([]));
      this._wrapperFields.beam_azimuth_angles.freeze(own, checkConsistency);
      this._refObject.beam_azimuth_angles = this._wrapperFields.beam_azimuth_angles.refObject;
    }
    this._wrapperFields.beam_altitude_angles.freeze(own, checkConsistency);
    this._refObject.beam_altitude_angles = this._wrapperFields.beam_altitude_angles.refObject;
    if (own) {
      this._wrapperFields.beam_altitude_angles.fill(Float64Array.from([]));
      this._wrapperFields.beam_altitude_angles.freeze(own, checkConsistency);
      this._refObject.beam_altitude_angles = this._wrapperFields.beam_altitude_angles.refObject;
    }
    this._wrapperFields.imu_to_sensor_transform.freeze(own, checkConsistency);
    this._refObject.imu_to_sensor_transform = this._wrapperFields.imu_to_sensor_transform.refObject;
    if (own) {
      this._wrapperFields.imu_to_sensor_transform.fill(Float64Array.from([]));
      this._wrapperFields.imu_to_sensor_transform.freeze(own, checkConsistency);
      this._refObject.imu_to_sensor_transform = this._wrapperFields.imu_to_sensor_transform.refObject;
    }
    this._wrapperFields.lidar_to_sensor_transform.freeze(own, checkConsistency);
    this._refObject.lidar_to_sensor_transform = this._wrapperFields.lidar_to_sensor_transform.refObject;
    if (own) {
      this._wrapperFields.lidar_to_sensor_transform.fill(Float64Array.from([]));
      this._wrapperFields.lidar_to_sensor_transform.freeze(own, checkConsistency);
      this._refObject.lidar_to_sensor_transform = this._wrapperFields.lidar_to_sensor_transform.refObject;
    }
    if (own) {
      this._wrapperFields.serial_no.freeze(own, checkConsistency);
    }
    this._refObject.serial_no = this._wrapperFields.serial_no.refObject;
    if (own) {
      this._wrapperFields.firmware_rev.freeze(own, checkConsistency);
    }
    this._refObject.firmware_rev = this._wrapperFields.firmware_rev.refObject;
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._hostnameIntialized = true;
    this._wrapperFields.hostname.data = refObject.hostname.data;
    this._lidar_modeIntialized = true;
    this._wrapperFields.lidar_mode.data = refObject.lidar_mode.data;
    this._timestamp_modeIntialized = true;
    this._wrapperFields.timestamp_mode.data = refObject.timestamp_mode.data;
    this._wrapperFields.beam_azimuth_angles.copyRefObject(refObject.beam_azimuth_angles);
    this._wrapperFields.beam_altitude_angles.copyRefObject(refObject.beam_altitude_angles);
    this._wrapperFields.imu_to_sensor_transform.copyRefObject(refObject.imu_to_sensor_transform);
    this._wrapperFields.lidar_to_sensor_transform.copyRefObject(refObject.lidar_to_sensor_transform);
    this._serial_noIntialized = true;
    this._wrapperFields.serial_no.data = refObject.serial_no.data;
    this._firmware_revIntialized = true;
    this._wrapperFields.firmware_rev.data = refObject.firmware_rev.data;
    this._imu_portIntialized = true;
    this._refObject.imu_port = refObject.imu_port;
    this._lidar_portIntialized = true;
    this._refObject.lidar_port = refObject.lidar_port;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    StringWrapper.freeStruct(refObject.hostname);
    StringWrapper.freeStruct(refObject.lidar_mode);
    StringWrapper.freeStruct(refObject.timestamp_mode);
    if (refObject.beam_azimuth_angles.size != 0) {
      Float64Wrapper.ArrayType.freeArray(refObject.beam_azimuth_angles);
      if (Float64Wrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.beam_azimuth_angles, Float64Wrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.beam_altitude_angles.size != 0) {
      Float64Wrapper.ArrayType.freeArray(refObject.beam_altitude_angles);
      if (Float64Wrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.beam_altitude_angles, Float64Wrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.imu_to_sensor_transform.size != 0) {
      Float64Wrapper.ArrayType.freeArray(refObject.imu_to_sensor_transform);
      if (Float64Wrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.imu_to_sensor_transform, Float64Wrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.lidar_to_sensor_transform.size != 0) {
      Float64Wrapper.ArrayType.freeArray(refObject.lidar_to_sensor_transform);
      if (Float64Wrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.lidar_to_sensor_transform, Float64Wrapper.refObjectArrayType, 'data');
      }
    }
    StringWrapper.freeStruct(refObject.serial_no);
    StringWrapper.freeStruct(refObject.firmware_rev);
  }
  static destoryRawROS(msg) {
    MetadataWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'ouster_msgs', subFolder: 'msg', interfaceName: 'Metadata'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get hostname() {
    if (!this._hostnameIntialized) {
      return undefined;
    }
    return this._wrapperFields.hostname.data;
  }
  set hostname(value) {
    this._hostnameIntialized = true;
    this._wrapperFields.hostname.data = value;
  }
  get lidar_mode() {
    if (!this._lidar_modeIntialized) {
      return undefined;
    }
    return this._wrapperFields.lidar_mode.data;
  }
  set lidar_mode(value) {
    this._lidar_modeIntialized = true;
    this._wrapperFields.lidar_mode.data = value;
  }
  get timestamp_mode() {
    if (!this._timestamp_modeIntialized) {
      return undefined;
    }
    return this._wrapperFields.timestamp_mode.data;
  }
  set timestamp_mode(value) {
    this._timestamp_modeIntialized = true;
    this._wrapperFields.timestamp_mode.data = value;
  }
  get beam_azimuth_angles() {
    return this._wrapperFields['beam_azimuth_angles'].data;
  }
  set beam_azimuth_angles(value) {
    this._wrapperFields['beam_azimuth_angles'].fill(value);
  }
  get beam_altitude_angles() {
    return this._wrapperFields['beam_altitude_angles'].data;
  }
  set beam_altitude_angles(value) {
    this._wrapperFields['beam_altitude_angles'].fill(value);
  }
  get imu_to_sensor_transform() {
    return this._wrapperFields['imu_to_sensor_transform'].data;
  }
  set imu_to_sensor_transform(value) {
    this._wrapperFields['imu_to_sensor_transform'].fill(value);
  }
  get lidar_to_sensor_transform() {
    return this._wrapperFields['lidar_to_sensor_transform'].data;
  }
  set lidar_to_sensor_transform(value) {
    this._wrapperFields['lidar_to_sensor_transform'].fill(value);
  }
  get serial_no() {
    if (!this._serial_noIntialized) {
      return undefined;
    }
    return this._wrapperFields.serial_no.data;
  }
  set serial_no(value) {
    this._serial_noIntialized = true;
    this._wrapperFields.serial_no.data = value;
  }
  get firmware_rev() {
    if (!this._firmware_revIntialized) {
      return undefined;
    }
    return this._wrapperFields.firmware_rev.data;
  }
  set firmware_rev(value) {
    this._firmware_revIntialized = true;
    this._wrapperFields.firmware_rev.data = value;
  }
  get imu_port() {
    if (!this._imu_portIntialized) {
      return undefined;
    }
    return this._refObject.imu_port;
  }
  set imu_port(value) {
    this._imu_portIntialized = true;
    this._refObject.imu_port = value;
  }
  get lidar_port() {
    if (!this._lidar_portIntialized) {
      return undefined;
    }
    return this._refObject.lidar_port;
  }
  set lidar_port(value) {
    this._lidar_portIntialized = true;
    this._refObject.lidar_port = value;
  }
  copyRefObject(refObject) {
    this._refObject = new MetadataRefStruct(refObject.toObject());
    this._hostnameIntialized = true;
    this._wrapperFields.hostname.copyRefObject(this._refObject.hostname);
    this._lidar_modeIntialized = true;
    this._wrapperFields.lidar_mode.copyRefObject(this._refObject.lidar_mode);
    this._timestamp_modeIntialized = true;
    this._wrapperFields.timestamp_mode.copyRefObject(this._refObject.timestamp_mode);
    this._wrapperFields.beam_azimuth_angles.copyRefObject(this._refObject.beam_azimuth_angles);
    this._wrapperFields.beam_altitude_angles.copyRefObject(this._refObject.beam_altitude_angles);
    this._wrapperFields.imu_to_sensor_transform.copyRefObject(this._refObject.imu_to_sensor_transform);
    this._wrapperFields.lidar_to_sensor_transform.copyRefObject(this._refObject.lidar_to_sensor_transform);
    this._serial_noIntialized = true;
    this._wrapperFields.serial_no.copyRefObject(this._refObject.serial_no);
    this._firmware_revIntialized = true;
    this._wrapperFields.firmware_rev.copyRefObject(this._refObject.firmware_rev);
    this._imu_portIntialized = true;
    this._lidar_portIntialized = true;
  }
  copy(other) {
    this._refObject = new MetadataRefStruct(other._refObject.toObject());
    this._hostnameIntialized = true;
    this._wrapperFields.hostname.copy(other._wrapperFields.hostname);
    this._lidar_modeIntialized = true;
    this._wrapperFields.lidar_mode.copy(other._wrapperFields.lidar_mode);
    this._timestamp_modeIntialized = true;
    this._wrapperFields.timestamp_mode.copy(other._wrapperFields.timestamp_mode);
    this._wrapperFields.beam_azimuth_angles.copy(other._wrapperFields.beam_azimuth_angles);
    this._wrapperFields.beam_altitude_angles.copy(other._wrapperFields.beam_altitude_angles);
    this._wrapperFields.imu_to_sensor_transform.copy(other._wrapperFields.imu_to_sensor_transform);
    this._wrapperFields.lidar_to_sensor_transform.copy(other._wrapperFields.lidar_to_sensor_transform);
    this._serial_noIntialized = true;
    this._wrapperFields.serial_no.copy(other._wrapperFields.serial_no);
    this._firmware_revIntialized = true;
    this._wrapperFields.firmware_rev.copy(other._wrapperFields.firmware_rev);
    this._imu_portIntialized = true;
    this._lidar_portIntialized = true;
  }
  static get classType() {
    return MetadataWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"hostname","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"lidar_mode","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"timestamp_mode","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"beam_azimuth_angles","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"beam_altitude_angles","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"imu_to_sensor_transform","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"lidar_to_sensor_transform","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"serial_no","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"firmware_rev","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"imu_port","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"int8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"lidar_port","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"int8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"ouster_msgs","type":"Metadata","stringUpperBound":null,"isPrimitiveType":false},"msgName":"Metadata"};
  }
  hasMember(name) {
    let memberNames = ["hostname","lidar_mode","timestamp_mode","beam_azimuth_angles","beam_altitude_angles","imu_to_sensor_transform","lidar_to_sensor_transform","serial_no","firmware_rev","imu_port","lidar_port"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class MetadataArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof MetadataWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new MetadataWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to MetadataArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to MetadataArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new MetadataRefArray(size);
    this._refObject = new MetadataRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new MetadataWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof MetadataArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "MetadataArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      MetadataWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return MetadataWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return MetadataArrayWrapper;
  }
}
module.exports = MetadataWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "hostname",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "lidar_mode",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "timestamp_mode",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "beam_azimuth_angles",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "beam_altitude_angles",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "imu_to_sensor_transform",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "lidar_to_sensor_transform",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "serial_no",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "firmware_rev",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "imu_port",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "int8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "lidar_port",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "int8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "ouster_msgs",
    "type": "Metadata",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "Metadata"
}
*/
