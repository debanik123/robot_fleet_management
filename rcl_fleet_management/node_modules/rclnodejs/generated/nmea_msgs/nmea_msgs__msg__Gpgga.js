// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const HeaderWrapper = require('../../generated/std_msgs/std_msgs__msg__Header.js');
const StringWrapper = require('../../generated/std_msgs/std_msgs__msg__String.js');
const GpggaRefStruct = StructType({
  header: HeaderWrapper.refObjectType,
  message_id: primitiveTypes.string,
  utc_seconds: primitiveTypes.float64,
  lat: primitiveTypes.float64,
  lon: primitiveTypes.float64,
  lat_dir: primitiveTypes.string,
  lon_dir: primitiveTypes.string,
  gps_qual: primitiveTypes.uint32,
  num_sats: primitiveTypes.uint32,
  hdop: primitiveTypes.float32,
  alt: primitiveTypes.float32,
  altitude_units: primitiveTypes.string,
  undulation: primitiveTypes.float32,
  undulation_units: primitiveTypes.string,
  diff_age: primitiveTypes.uint32,
  station_id: primitiveTypes.string,
});
const GpggaRefArray = ArrayType(GpggaRefStruct);
const GpggaRefStructArray = StructType({
  data: GpggaRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class GpggaWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new GpggaRefStruct(other._refObject.toObject());
      this._wrapperFields.header =  new HeaderWrapper(other._wrapperFields.header);
      this._message_idIntialized = true;
      this._wrapperFields.message_id =  new StringWrapper(other._wrapperFields.message_id);
      this._utc_secondsIntialized = true;
      this._latIntialized = true;
      this._lonIntialized = true;
      this._lat_dirIntialized = true;
      this._wrapperFields.lat_dir =  new StringWrapper(other._wrapperFields.lat_dir);
      this._lon_dirIntialized = true;
      this._wrapperFields.lon_dir =  new StringWrapper(other._wrapperFields.lon_dir);
      this._gps_qualIntialized = true;
      this._num_satsIntialized = true;
      this._hdopIntialized = true;
      this._altIntialized = true;
      this._altitude_unitsIntialized = true;
      this._wrapperFields.altitude_units =  new StringWrapper(other._wrapperFields.altitude_units);
      this._undulationIntialized = true;
      this._undulation_unitsIntialized = true;
      this._wrapperFields.undulation_units =  new StringWrapper(other._wrapperFields.undulation_units);
      this._diff_ageIntialized = true;
      this._station_idIntialized = true;
      this._wrapperFields.station_id =  new StringWrapper(other._wrapperFields.station_id);
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new GpggaRefStruct();
    this._wrapperFields.header = new HeaderWrapper();
    this._message_idIntialized = false;
    this._wrapperFields.message_id = new StringWrapper();
    this._utc_secondsIntialized = false;
    this._latIntialized = false;
    this._lonIntialized = false;
    this._lat_dirIntialized = false;
    this._wrapperFields.lat_dir = new StringWrapper();
    this._lon_dirIntialized = false;
    this._wrapperFields.lon_dir = new StringWrapper();
    this._gps_qualIntialized = false;
    this._num_satsIntialized = false;
    this._hdopIntialized = false;
    this._altIntialized = false;
    this._altitude_unitsIntialized = false;
    this._wrapperFields.altitude_units = new StringWrapper();
    this._undulationIntialized = false;
    this._undulation_unitsIntialized = false;
    this._wrapperFields.undulation_units = new StringWrapper();
    this._diff_ageIntialized = false;
    this._station_idIntialized = false;
    this._wrapperFields.station_id = new StringWrapper();
  }
  static createFromRefObject(refObject) {
    let self = new GpggaWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new GpggaArrayWrapper;
  }
  static get ArrayType() {
    return GpggaArrayWrapper;
  }
  static get refObjectArrayType() {
    return GpggaRefStructArray
  }
  static get refObjectType() {
    return GpggaRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._message_idIntialized) {
        throw new TypeError('Invalid argument: message_id in Gpgga');
      }
      if (checkConsistency && !this._utc_secondsIntialized) {
        throw new TypeError('Invalid argument: utc_seconds in Gpgga');
      }
      if (checkConsistency && !this._latIntialized) {
        throw new TypeError('Invalid argument: lat in Gpgga');
      }
      if (checkConsistency && !this._lonIntialized) {
        throw new TypeError('Invalid argument: lon in Gpgga');
      }
      if (checkConsistency && !this._lat_dirIntialized) {
        throw new TypeError('Invalid argument: lat_dir in Gpgga');
      }
      if (checkConsistency && !this._lon_dirIntialized) {
        throw new TypeError('Invalid argument: lon_dir in Gpgga');
      }
      if (checkConsistency && !this._gps_qualIntialized) {
        throw new TypeError('Invalid argument: gps_qual in Gpgga');
      }
      if (checkConsistency && !this._num_satsIntialized) {
        throw new TypeError('Invalid argument: num_sats in Gpgga');
      }
      if (checkConsistency && !this._hdopIntialized) {
        throw new TypeError('Invalid argument: hdop in Gpgga');
      }
      if (checkConsistency && !this._altIntialized) {
        throw new TypeError('Invalid argument: alt in Gpgga');
      }
      if (checkConsistency && !this._altitude_unitsIntialized) {
        throw new TypeError('Invalid argument: altitude_units in Gpgga');
      }
      if (checkConsistency && !this._undulationIntialized) {
        throw new TypeError('Invalid argument: undulation in Gpgga');
      }
      if (checkConsistency && !this._undulation_unitsIntialized) {
        throw new TypeError('Invalid argument: undulation_units in Gpgga');
      }
      if (checkConsistency && !this._diff_ageIntialized) {
        throw new TypeError('Invalid argument: diff_age in Gpgga');
      }
      if (checkConsistency && !this._station_idIntialized) {
        throw new TypeError('Invalid argument: station_id in Gpgga');
      }
    this._wrapperFields.header.freeze(own, checkConsistency);
    this._refObject.header = this._wrapperFields.header.refObject;
    if (own) {
      this._wrapperFields.message_id.freeze(own, checkConsistency);
    }
    this._refObject.message_id = this._wrapperFields.message_id.refObject;
    if (own) {
      this._wrapperFields.lat_dir.freeze(own, checkConsistency);
    }
    this._refObject.lat_dir = this._wrapperFields.lat_dir.refObject;
    if (own) {
      this._wrapperFields.lon_dir.freeze(own, checkConsistency);
    }
    this._refObject.lon_dir = this._wrapperFields.lon_dir.refObject;
    if (own) {
      this._wrapperFields.altitude_units.freeze(own, checkConsistency);
    }
    this._refObject.altitude_units = this._wrapperFields.altitude_units.refObject;
    if (own) {
      this._wrapperFields.undulation_units.freeze(own, checkConsistency);
    }
    this._refObject.undulation_units = this._wrapperFields.undulation_units.refObject;
    if (own) {
      this._wrapperFields.station_id.freeze(own, checkConsistency);
    }
    this._refObject.station_id = this._wrapperFields.station_id.refObject;
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._wrapperFields.header.copyRefObject(refObject.header);
    this._message_idIntialized = true;
    this._wrapperFields.message_id.data = refObject.message_id.data;
    this._utc_secondsIntialized = true;
    this._refObject.utc_seconds = refObject.utc_seconds;
    this._latIntialized = true;
    this._refObject.lat = refObject.lat;
    this._lonIntialized = true;
    this._refObject.lon = refObject.lon;
    this._lat_dirIntialized = true;
    this._wrapperFields.lat_dir.data = refObject.lat_dir.data;
    this._lon_dirIntialized = true;
    this._wrapperFields.lon_dir.data = refObject.lon_dir.data;
    this._gps_qualIntialized = true;
    this._refObject.gps_qual = refObject.gps_qual;
    this._num_satsIntialized = true;
    this._refObject.num_sats = refObject.num_sats;
    this._hdopIntialized = true;
    this._refObject.hdop = refObject.hdop;
    this._altIntialized = true;
    this._refObject.alt = refObject.alt;
    this._altitude_unitsIntialized = true;
    this._wrapperFields.altitude_units.data = refObject.altitude_units.data;
    this._undulationIntialized = true;
    this._refObject.undulation = refObject.undulation;
    this._undulation_unitsIntialized = true;
    this._wrapperFields.undulation_units.data = refObject.undulation_units.data;
    this._diff_ageIntialized = true;
    this._refObject.diff_age = refObject.diff_age;
    this._station_idIntialized = true;
    this._wrapperFields.station_id.data = refObject.station_id.data;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    HeaderWrapper.freeStruct(refObject.header);
    StringWrapper.freeStruct(refObject.message_id);
    StringWrapper.freeStruct(refObject.lat_dir);
    StringWrapper.freeStruct(refObject.lon_dir);
    StringWrapper.freeStruct(refObject.altitude_units);
    StringWrapper.freeStruct(refObject.undulation_units);
    StringWrapper.freeStruct(refObject.station_id);
  }
  static destoryRawROS(msg) {
    GpggaWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'nmea_msgs', subFolder: 'msg', interfaceName: 'Gpgga'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get header() {
    return this._wrapperFields.header;
  }
  set header(value) {
    if (value instanceof HeaderWrapper) {
      this._wrapperFields.header.copy(value);
    } else {
      this._wrapperFields.header.copy(new HeaderWrapper(value));
    }
  }
  get message_id() {
    if (!this._message_idIntialized) {
      return undefined;
    }
    return this._wrapperFields.message_id.data;
  }
  set message_id(value) {
    this._message_idIntialized = true;
    this._wrapperFields.message_id.data = value;
  }
  get utc_seconds() {
    if (!this._utc_secondsIntialized) {
      return undefined;
    }
    return this._refObject.utc_seconds;
  }
  set utc_seconds(value) {
    this._utc_secondsIntialized = true;
    this._refObject.utc_seconds = value;
  }
  get lat() {
    if (!this._latIntialized) {
      return undefined;
    }
    return this._refObject.lat;
  }
  set lat(value) {
    this._latIntialized = true;
    this._refObject.lat = value;
  }
  get lon() {
    if (!this._lonIntialized) {
      return undefined;
    }
    return this._refObject.lon;
  }
  set lon(value) {
    this._lonIntialized = true;
    this._refObject.lon = value;
  }
  get lat_dir() {
    if (!this._lat_dirIntialized) {
      return undefined;
    }
    return this._wrapperFields.lat_dir.data;
  }
  set lat_dir(value) {
    this._lat_dirIntialized = true;
    this._wrapperFields.lat_dir.data = value;
  }
  get lon_dir() {
    if (!this._lon_dirIntialized) {
      return undefined;
    }
    return this._wrapperFields.lon_dir.data;
  }
  set lon_dir(value) {
    this._lon_dirIntialized = true;
    this._wrapperFields.lon_dir.data = value;
  }
  get gps_qual() {
    if (!this._gps_qualIntialized) {
      return undefined;
    }
    return this._refObject.gps_qual;
  }
  set gps_qual(value) {
    this._gps_qualIntialized = true;
    this._refObject.gps_qual = value;
  }
  get num_sats() {
    if (!this._num_satsIntialized) {
      return undefined;
    }
    return this._refObject.num_sats;
  }
  set num_sats(value) {
    this._num_satsIntialized = true;
    this._refObject.num_sats = value;
  }
  get hdop() {
    if (!this._hdopIntialized) {
      return undefined;
    }
    return this._refObject.hdop;
  }
  set hdop(value) {
    this._hdopIntialized = true;
    this._refObject.hdop = value;
  }
  get alt() {
    if (!this._altIntialized) {
      return undefined;
    }
    return this._refObject.alt;
  }
  set alt(value) {
    this._altIntialized = true;
    this._refObject.alt = value;
  }
  get altitude_units() {
    if (!this._altitude_unitsIntialized) {
      return undefined;
    }
    return this._wrapperFields.altitude_units.data;
  }
  set altitude_units(value) {
    this._altitude_unitsIntialized = true;
    this._wrapperFields.altitude_units.data = value;
  }
  get undulation() {
    if (!this._undulationIntialized) {
      return undefined;
    }
    return this._refObject.undulation;
  }
  set undulation(value) {
    this._undulationIntialized = true;
    this._refObject.undulation = value;
  }
  get undulation_units() {
    if (!this._undulation_unitsIntialized) {
      return undefined;
    }
    return this._wrapperFields.undulation_units.data;
  }
  set undulation_units(value) {
    this._undulation_unitsIntialized = true;
    this._wrapperFields.undulation_units.data = value;
  }
  get diff_age() {
    if (!this._diff_ageIntialized) {
      return undefined;
    }
    return this._refObject.diff_age;
  }
  set diff_age(value) {
    this._diff_ageIntialized = true;
    this._refObject.diff_age = value;
  }
  get station_id() {
    if (!this._station_idIntialized) {
      return undefined;
    }
    return this._wrapperFields.station_id.data;
  }
  set station_id(value) {
    this._station_idIntialized = true;
    this._wrapperFields.station_id.data = value;
  }
  copyRefObject(refObject) {
    this._refObject = new GpggaRefStruct(refObject.toObject());
    this._wrapperFields.header.copyRefObject(this._refObject.header);
    this._message_idIntialized = true;
    this._wrapperFields.message_id.copyRefObject(this._refObject.message_id);
    this._utc_secondsIntialized = true;
    this._latIntialized = true;
    this._lonIntialized = true;
    this._lat_dirIntialized = true;
    this._wrapperFields.lat_dir.copyRefObject(this._refObject.lat_dir);
    this._lon_dirIntialized = true;
    this._wrapperFields.lon_dir.copyRefObject(this._refObject.lon_dir);
    this._gps_qualIntialized = true;
    this._num_satsIntialized = true;
    this._hdopIntialized = true;
    this._altIntialized = true;
    this._altitude_unitsIntialized = true;
    this._wrapperFields.altitude_units.copyRefObject(this._refObject.altitude_units);
    this._undulationIntialized = true;
    this._undulation_unitsIntialized = true;
    this._wrapperFields.undulation_units.copyRefObject(this._refObject.undulation_units);
    this._diff_ageIntialized = true;
    this._station_idIntialized = true;
    this._wrapperFields.station_id.copyRefObject(this._refObject.station_id);
  }
  copy(other) {
    this._refObject = new GpggaRefStruct(other._refObject.toObject());
    this._wrapperFields.header.copy(other._wrapperFields.header);
    this._message_idIntialized = true;
    this._wrapperFields.message_id.copy(other._wrapperFields.message_id);
    this._utc_secondsIntialized = true;
    this._latIntialized = true;
    this._lonIntialized = true;
    this._lat_dirIntialized = true;
    this._wrapperFields.lat_dir.copy(other._wrapperFields.lat_dir);
    this._lon_dirIntialized = true;
    this._wrapperFields.lon_dir.copy(other._wrapperFields.lon_dir);
    this._gps_qualIntialized = true;
    this._num_satsIntialized = true;
    this._hdopIntialized = true;
    this._altIntialized = true;
    this._altitude_unitsIntialized = true;
    this._wrapperFields.altitude_units.copy(other._wrapperFields.altitude_units);
    this._undulationIntialized = true;
    this._undulation_unitsIntialized = true;
    this._wrapperFields.undulation_units.copy(other._wrapperFields.undulation_units);
    this._diff_ageIntialized = true;
    this._station_idIntialized = true;
    this._wrapperFields.station_id.copy(other._wrapperFields.station_id);
  }
  static get classType() {
    return GpggaWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"header","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"std_msgs","type":"Header","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"message_id","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"utc_seconds","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"lat","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"lon","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"lat_dir","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"lon_dir","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"gps_qual","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"num_sats","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"hdop","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"alt","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"altitude_units","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"undulation","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"undulation_units","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"diff_age","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"station_id","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"nmea_msgs","type":"Gpgga","stringUpperBound":null,"isPrimitiveType":false},"msgName":"Gpgga"};
  }
  hasMember(name) {
    let memberNames = ["header","message_id","utc_seconds","lat","lon","lat_dir","lon_dir","gps_qual","num_sats","hdop","alt","altitude_units","undulation","undulation_units","diff_age","station_id"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class GpggaArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof GpggaWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new GpggaWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to GpggaArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to GpggaArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new GpggaRefArray(size);
    this._refObject = new GpggaRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new GpggaWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof GpggaArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "GpggaArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      GpggaWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return GpggaWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return GpggaArrayWrapper;
  }
}
module.exports = GpggaWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "header",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "std_msgs",
        "type": "Header",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "message_id",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "utc_seconds",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "lat",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "lon",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "lat_dir",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "lon_dir",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "gps_qual",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "num_sats",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "hdop",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "alt",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "altitude_units",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "undulation",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "undulation_units",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "diff_age",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "station_id",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "nmea_msgs",
    "type": "Gpgga",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "Gpgga"
}
*/
