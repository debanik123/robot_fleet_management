// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const BoolWrapper = require('../../generated/std_msgs/std_msgs__msg__Bool.js');
const OutputPathsRefStruct = StructType({
  status: BoolWrapper.refObjectArrayType,
  is_safe: BoolWrapper.refObjectArrayType,
  is_valid: BoolWrapper.refObjectArrayType,
  active_monitoring_case: primitiveTypes.int32,
});
const OutputPathsRefArray = ArrayType(OutputPathsRefStruct);
const OutputPathsRefStructArray = StructType({
  data: OutputPathsRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class OutputPathsWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    this._statusArray = [];
    this._is_safeArray = [];
    this._is_validArray = [];
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new OutputPathsRefStruct(other._refObject.toObject());
      this._wrapperFields.status = BoolWrapper.createArray();
      this._wrapperFields.status.copy(other._wrapperFields.status);
      this.status = other.status;
      this._wrapperFields.is_safe = BoolWrapper.createArray();
      this._wrapperFields.is_safe.copy(other._wrapperFields.is_safe);
      this.is_safe = other.is_safe;
      this._wrapperFields.is_valid = BoolWrapper.createArray();
      this._wrapperFields.is_valid.copy(other._wrapperFields.is_valid);
      this.is_valid = other.is_valid;
      this._active_monitoring_caseIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new OutputPathsRefStruct();
    this._wrapperFields.status = BoolWrapper.createArray();
    this._wrapperFields.is_safe = BoolWrapper.createArray();
    this._wrapperFields.is_valid = BoolWrapper.createArray();
    this._active_monitoring_caseIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new OutputPathsWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new OutputPathsArrayWrapper;
  }
  static get ArrayType() {
    return OutputPathsArrayWrapper;
  }
  static get refObjectArrayType() {
    return OutputPathsRefStructArray
  }
  static get refObjectType() {
    return OutputPathsRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._active_monitoring_caseIntialized) {
        throw new TypeError('Invalid argument: active_monitoring_case in OutputPaths');
      }
    if (!own) {
      this._wrapperFields.status.fill(this._statusArray);
      this._wrapperFields.status.freeze(own, checkConsistency);
      this._refObject.status = this._wrapperFields.status.refObject;
    } else {
      this._wrapperFields.status.fill([]);
      this._wrapperFields.status.freeze(own, checkConsistency);
      this._refObject.status = this._wrapperFields.status.refObject;
    }
    if (!own) {
      this._wrapperFields.is_safe.fill(this._is_safeArray);
      this._wrapperFields.is_safe.freeze(own, checkConsistency);
      this._refObject.is_safe = this._wrapperFields.is_safe.refObject;
    } else {
      this._wrapperFields.is_safe.fill([]);
      this._wrapperFields.is_safe.freeze(own, checkConsistency);
      this._refObject.is_safe = this._wrapperFields.is_safe.refObject;
    }
    if (!own) {
      this._wrapperFields.is_valid.fill(this._is_validArray);
      this._wrapperFields.is_valid.freeze(own, checkConsistency);
      this._refObject.is_valid = this._wrapperFields.is_valid.refObject;
    } else {
      this._wrapperFields.is_valid.fill([]);
      this._wrapperFields.is_valid.freeze(own, checkConsistency);
      this._refObject.is_valid = this._wrapperFields.is_valid.refObject;
    }
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    refObject.status.data.length = refObject.status.size;
    for (let index = 0; index < refObject.status.size; index++) {
      this._statusArray[index] = refObject.status.data[index].data;
    }
    refObject.is_safe.data.length = refObject.is_safe.size;
    for (let index = 0; index < refObject.is_safe.size; index++) {
      this._is_safeArray[index] = refObject.is_safe.data[index].data;
    }
    refObject.is_valid.data.length = refObject.is_valid.size;
    for (let index = 0; index < refObject.is_valid.size; index++) {
      this._is_validArray[index] = refObject.is_valid.data[index].data;
    }
    this._active_monitoring_caseIntialized = true;
    this._refObject.active_monitoring_case = refObject.active_monitoring_case;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    if (refObject.status.size != 0) {
      BoolWrapper.ArrayType.freeArray(refObject.status);
      if (BoolWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.status, BoolWrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.is_safe.size != 0) {
      BoolWrapper.ArrayType.freeArray(refObject.is_safe);
      if (BoolWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.is_safe, BoolWrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.is_valid.size != 0) {
      BoolWrapper.ArrayType.freeArray(refObject.is_valid);
      if (BoolWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.is_valid, BoolWrapper.refObjectArrayType, 'data');
      }
    }
  }
  static destoryRawROS(msg) {
    OutputPathsWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'sick_safetyscanners2_interfaces', subFolder: 'msg', interfaceName: 'OutputPaths'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get status() {
    return this._statusArray;
  }
  set status(value) {
    this._statusArray = value;
  }
  get is_safe() {
    return this._is_safeArray;
  }
  set is_safe(value) {
    this._is_safeArray = value;
  }
  get is_valid() {
    return this._is_validArray;
  }
  set is_valid(value) {
    this._is_validArray = value;
  }
  get active_monitoring_case() {
    if (!this._active_monitoring_caseIntialized) {
      return undefined;
    }
    return this._refObject.active_monitoring_case;
  }
  set active_monitoring_case(value) {
    this._active_monitoring_caseIntialized = true;
    this._refObject.active_monitoring_case = value;
  }
  copyRefObject(refObject) {
    this._refObject = new OutputPathsRefStruct(refObject.toObject());
    refObject.status.data.length = refObject.status.size;
    for (let index = 0; index < refObject.status.size; index++) {
      this._statusArray[index] = refObject.status.data[index].data;
    }
    refObject.is_safe.data.length = refObject.is_safe.size;
    for (let index = 0; index < refObject.is_safe.size; index++) {
      this._is_safeArray[index] = refObject.is_safe.data[index].data;
    }
    refObject.is_valid.data.length = refObject.is_valid.size;
    for (let index = 0; index < refObject.is_valid.size; index++) {
      this._is_validArray[index] = refObject.is_valid.data[index].data;
    }
    this._active_monitoring_caseIntialized = true;
  }
  copy(other) {
    this._refObject = new OutputPathsRefStruct(other._refObject.toObject());
    this._statusArray = other._statusArray.slice();
    this._is_safeArray = other._is_safeArray.slice();
    this._is_validArray = other._is_validArray.slice();
    this._active_monitoring_caseIntialized = true;
  }
  static get classType() {
    return OutputPathsWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"status","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"is_safe","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"is_valid","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"active_monitoring_case","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"int32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"sick_safetyscanners2_interfaces","type":"OutputPaths","stringUpperBound":null,"isPrimitiveType":false},"msgName":"OutputPaths"};
  }
  hasMember(name) {
    let memberNames = ["status","is_safe","is_valid","active_monitoring_case"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class OutputPathsArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof OutputPathsWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new OutputPathsWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to OutputPathsArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to OutputPathsArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new OutputPathsRefArray(size);
    this._refObject = new OutputPathsRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new OutputPathsWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof OutputPathsArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "OutputPathsArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      OutputPathsWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return OutputPathsWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return OutputPathsArrayWrapper;
  }
}
module.exports = OutputPathsWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "status",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "is_safe",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "is_valid",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "active_monitoring_case",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "int32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "sick_safetyscanners2_interfaces",
    "type": "OutputPaths",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "OutputPaths"
}
*/
