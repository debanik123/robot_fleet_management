// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const LaserScanWrapper = require('../../generated/sensor_msgs/sensor_msgs__msg__LaserScan.js');
const BoolWrapper = require('../../generated/std_msgs/std_msgs__msg__Bool.js');
const ExtendedLaserScanRefStruct = StructType({
  laser_scan: LaserScanWrapper.refObjectType,
  reflektor_status: BoolWrapper.refObjectArrayType,
  reflektor_median: BoolWrapper.refObjectArrayType,
  intrusion: BoolWrapper.refObjectArrayType,
});
const ExtendedLaserScanRefArray = ArrayType(ExtendedLaserScanRefStruct);
const ExtendedLaserScanRefStructArray = StructType({
  data: ExtendedLaserScanRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class ExtendedLaserScanWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    this._reflektor_statusArray = [];
    this._reflektor_medianArray = [];
    this._intrusionArray = [];
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new ExtendedLaserScanRefStruct(other._refObject.toObject());
      this._wrapperFields.laser_scan =  new LaserScanWrapper(other._wrapperFields.laser_scan);
      this._wrapperFields.reflektor_status = BoolWrapper.createArray();
      this._wrapperFields.reflektor_status.copy(other._wrapperFields.reflektor_status);
      this.reflektor_status = other.reflektor_status;
      this._wrapperFields.reflektor_median = BoolWrapper.createArray();
      this._wrapperFields.reflektor_median.copy(other._wrapperFields.reflektor_median);
      this.reflektor_median = other.reflektor_median;
      this._wrapperFields.intrusion = BoolWrapper.createArray();
      this._wrapperFields.intrusion.copy(other._wrapperFields.intrusion);
      this.intrusion = other.intrusion;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new ExtendedLaserScanRefStruct();
    this._wrapperFields.laser_scan = new LaserScanWrapper();
    this._wrapperFields.reflektor_status = BoolWrapper.createArray();
    this._wrapperFields.reflektor_median = BoolWrapper.createArray();
    this._wrapperFields.intrusion = BoolWrapper.createArray();
  }
  static createFromRefObject(refObject) {
    let self = new ExtendedLaserScanWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new ExtendedLaserScanArrayWrapper;
  }
  static get ArrayType() {
    return ExtendedLaserScanArrayWrapper;
  }
  static get refObjectArrayType() {
    return ExtendedLaserScanRefStructArray
  }
  static get refObjectType() {
    return ExtendedLaserScanRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
    this._wrapperFields.laser_scan.freeze(own, checkConsistency);
    this._refObject.laser_scan = this._wrapperFields.laser_scan.refObject;
    if (!own) {
      this._wrapperFields.reflektor_status.fill(this._reflektor_statusArray);
      this._wrapperFields.reflektor_status.freeze(own, checkConsistency);
      this._refObject.reflektor_status = this._wrapperFields.reflektor_status.refObject;
    } else {
      this._wrapperFields.reflektor_status.fill([]);
      this._wrapperFields.reflektor_status.freeze(own, checkConsistency);
      this._refObject.reflektor_status = this._wrapperFields.reflektor_status.refObject;
    }
    if (!own) {
      this._wrapperFields.reflektor_median.fill(this._reflektor_medianArray);
      this._wrapperFields.reflektor_median.freeze(own, checkConsistency);
      this._refObject.reflektor_median = this._wrapperFields.reflektor_median.refObject;
    } else {
      this._wrapperFields.reflektor_median.fill([]);
      this._wrapperFields.reflektor_median.freeze(own, checkConsistency);
      this._refObject.reflektor_median = this._wrapperFields.reflektor_median.refObject;
    }
    if (!own) {
      this._wrapperFields.intrusion.fill(this._intrusionArray);
      this._wrapperFields.intrusion.freeze(own, checkConsistency);
      this._refObject.intrusion = this._wrapperFields.intrusion.refObject;
    } else {
      this._wrapperFields.intrusion.fill([]);
      this._wrapperFields.intrusion.freeze(own, checkConsistency);
      this._refObject.intrusion = this._wrapperFields.intrusion.refObject;
    }
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._wrapperFields.laser_scan.copyRefObject(refObject.laser_scan);
    refObject.reflektor_status.data.length = refObject.reflektor_status.size;
    for (let index = 0; index < refObject.reflektor_status.size; index++) {
      this._reflektor_statusArray[index] = refObject.reflektor_status.data[index].data;
    }
    refObject.reflektor_median.data.length = refObject.reflektor_median.size;
    for (let index = 0; index < refObject.reflektor_median.size; index++) {
      this._reflektor_medianArray[index] = refObject.reflektor_median.data[index].data;
    }
    refObject.intrusion.data.length = refObject.intrusion.size;
    for (let index = 0; index < refObject.intrusion.size; index++) {
      this._intrusionArray[index] = refObject.intrusion.data[index].data;
    }
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    LaserScanWrapper.freeStruct(refObject.laser_scan);
    if (refObject.reflektor_status.size != 0) {
      BoolWrapper.ArrayType.freeArray(refObject.reflektor_status);
      if (BoolWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.reflektor_status, BoolWrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.reflektor_median.size != 0) {
      BoolWrapper.ArrayType.freeArray(refObject.reflektor_median);
      if (BoolWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.reflektor_median, BoolWrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.intrusion.size != 0) {
      BoolWrapper.ArrayType.freeArray(refObject.intrusion);
      if (BoolWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.intrusion, BoolWrapper.refObjectArrayType, 'data');
      }
    }
  }
  static destoryRawROS(msg) {
    ExtendedLaserScanWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'sick_safetyscanners2_interfaces', subFolder: 'msg', interfaceName: 'ExtendedLaserScan'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get laser_scan() {
    return this._wrapperFields.laser_scan;
  }
  set laser_scan(value) {
    if (value instanceof LaserScanWrapper) {
      this._wrapperFields.laser_scan.copy(value);
    } else {
      this._wrapperFields.laser_scan.copy(new LaserScanWrapper(value));
    }
  }
  get reflektor_status() {
    return this._reflektor_statusArray;
  }
  set reflektor_status(value) {
    this._reflektor_statusArray = value;
  }
  get reflektor_median() {
    return this._reflektor_medianArray;
  }
  set reflektor_median(value) {
    this._reflektor_medianArray = value;
  }
  get intrusion() {
    return this._intrusionArray;
  }
  set intrusion(value) {
    this._intrusionArray = value;
  }
  copyRefObject(refObject) {
    this._refObject = new ExtendedLaserScanRefStruct(refObject.toObject());
    this._wrapperFields.laser_scan.copyRefObject(this._refObject.laser_scan);
    refObject.reflektor_status.data.length = refObject.reflektor_status.size;
    for (let index = 0; index < refObject.reflektor_status.size; index++) {
      this._reflektor_statusArray[index] = refObject.reflektor_status.data[index].data;
    }
    refObject.reflektor_median.data.length = refObject.reflektor_median.size;
    for (let index = 0; index < refObject.reflektor_median.size; index++) {
      this._reflektor_medianArray[index] = refObject.reflektor_median.data[index].data;
    }
    refObject.intrusion.data.length = refObject.intrusion.size;
    for (let index = 0; index < refObject.intrusion.size; index++) {
      this._intrusionArray[index] = refObject.intrusion.data[index].data;
    }
  }
  copy(other) {
    this._refObject = new ExtendedLaserScanRefStruct(other._refObject.toObject());
    this._wrapperFields.laser_scan.copy(other._wrapperFields.laser_scan);
    this._reflektor_statusArray = other._reflektor_statusArray.slice();
    this._reflektor_medianArray = other._reflektor_medianArray.slice();
    this._intrusionArray = other._intrusionArray.slice();
  }
  static get classType() {
    return ExtendedLaserScanWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"laser_scan","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"sensor_msgs","type":"LaserScan","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"reflektor_status","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"reflektor_median","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"intrusion","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"sick_safetyscanners2_interfaces","type":"ExtendedLaserScan","stringUpperBound":null,"isPrimitiveType":false},"msgName":"ExtendedLaserScan"};
  }
  hasMember(name) {
    let memberNames = ["laser_scan","reflektor_status","reflektor_median","intrusion"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class ExtendedLaserScanArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof ExtendedLaserScanWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new ExtendedLaserScanWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to ExtendedLaserScanArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to ExtendedLaserScanArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new ExtendedLaserScanRefArray(size);
    this._refObject = new ExtendedLaserScanRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new ExtendedLaserScanWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof ExtendedLaserScanArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "ExtendedLaserScanArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      ExtendedLaserScanWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return ExtendedLaserScanWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return ExtendedLaserScanArrayWrapper;
  }
}
module.exports = ExtendedLaserScanWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "laser_scan",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "sensor_msgs",
        "type": "LaserScan",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "reflektor_status",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "reflektor_median",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "intrusion",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "sick_safetyscanners2_interfaces",
    "type": "ExtendedLaserScan",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "ExtendedLaserScan"
}
*/
