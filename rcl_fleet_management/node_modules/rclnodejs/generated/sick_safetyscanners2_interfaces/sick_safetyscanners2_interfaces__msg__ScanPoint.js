// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const ScanPointRefStruct = StructType({
  angle: primitiveTypes.float32,
  distance: primitiveTypes.uint16,
  reflectivity: primitiveTypes.uint8,
  valid: primitiveTypes.bool,
  infinite: primitiveTypes.bool,
  glare: primitiveTypes.bool,
  reflector: primitiveTypes.bool,
  contamination: primitiveTypes.bool,
  contamination_warning: primitiveTypes.bool,
});
const ScanPointRefArray = ArrayType(ScanPointRefStruct);
const ScanPointRefStructArray = StructType({
  data: ScanPointRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class ScanPointWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new ScanPointRefStruct(other._refObject.toObject());
      this._angleIntialized = true;
      this._distanceIntialized = true;
      this._reflectivityIntialized = true;
      this._validIntialized = true;
      this._infiniteIntialized = true;
      this._glareIntialized = true;
      this._reflectorIntialized = true;
      this._contaminationIntialized = true;
      this._contamination_warningIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new ScanPointRefStruct();
    this._angleIntialized = false;
    this._distanceIntialized = false;
    this._reflectivityIntialized = false;
    this._validIntialized = false;
    this._infiniteIntialized = false;
    this._glareIntialized = false;
    this._reflectorIntialized = false;
    this._contaminationIntialized = false;
    this._contamination_warningIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new ScanPointWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new ScanPointArrayWrapper;
  }
  static get ArrayType() {
    return ScanPointArrayWrapper;
  }
  static get refObjectArrayType() {
    return ScanPointRefStructArray
  }
  static get refObjectType() {
    return ScanPointRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._angleIntialized) {
        throw new TypeError('Invalid argument: angle in ScanPoint');
      }
      if (checkConsistency && !this._distanceIntialized) {
        throw new TypeError('Invalid argument: distance in ScanPoint');
      }
      if (checkConsistency && !this._reflectivityIntialized) {
        throw new TypeError('Invalid argument: reflectivity in ScanPoint');
      }
      if (checkConsistency && !this._validIntialized) {
        throw new TypeError('Invalid argument: valid in ScanPoint');
      }
      if (checkConsistency && !this._infiniteIntialized) {
        throw new TypeError('Invalid argument: infinite in ScanPoint');
      }
      if (checkConsistency && !this._glareIntialized) {
        throw new TypeError('Invalid argument: glare in ScanPoint');
      }
      if (checkConsistency && !this._reflectorIntialized) {
        throw new TypeError('Invalid argument: reflector in ScanPoint');
      }
      if (checkConsistency && !this._contaminationIntialized) {
        throw new TypeError('Invalid argument: contamination in ScanPoint');
      }
      if (checkConsistency && !this._contamination_warningIntialized) {
        throw new TypeError('Invalid argument: contamination_warning in ScanPoint');
      }
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._angleIntialized = true;
    this._refObject.angle = refObject.angle;
    this._distanceIntialized = true;
    this._refObject.distance = refObject.distance;
    this._reflectivityIntialized = true;
    this._refObject.reflectivity = refObject.reflectivity;
    this._validIntialized = true;
    this._refObject.valid = refObject.valid;
    this._infiniteIntialized = true;
    this._refObject.infinite = refObject.infinite;
    this._glareIntialized = true;
    this._refObject.glare = refObject.glare;
    this._reflectorIntialized = true;
    this._refObject.reflector = refObject.reflector;
    this._contaminationIntialized = true;
    this._refObject.contamination = refObject.contamination;
    this._contamination_warningIntialized = true;
    this._refObject.contamination_warning = refObject.contamination_warning;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
  }
  static destoryRawROS(msg) {
    ScanPointWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'sick_safetyscanners2_interfaces', subFolder: 'msg', interfaceName: 'ScanPoint'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get angle() {
    if (!this._angleIntialized) {
      return undefined;
    }
    return this._refObject.angle;
  }
  set angle(value) {
    this._angleIntialized = true;
    this._refObject.angle = value;
  }
  get distance() {
    if (!this._distanceIntialized) {
      return undefined;
    }
    return this._refObject.distance;
  }
  set distance(value) {
    this._distanceIntialized = true;
    this._refObject.distance = value;
  }
  get reflectivity() {
    if (!this._reflectivityIntialized) {
      return undefined;
    }
    return this._refObject.reflectivity;
  }
  set reflectivity(value) {
    this._reflectivityIntialized = true;
    this._refObject.reflectivity = value;
  }
  get valid() {
    if (!this._validIntialized) {
      return undefined;
    }
    return this._refObject.valid;
  }
  set valid(value) {
    this._validIntialized = true;
    this._refObject.valid = value;
  }
  get infinite() {
    if (!this._infiniteIntialized) {
      return undefined;
    }
    return this._refObject.infinite;
  }
  set infinite(value) {
    this._infiniteIntialized = true;
    this._refObject.infinite = value;
  }
  get glare() {
    if (!this._glareIntialized) {
      return undefined;
    }
    return this._refObject.glare;
  }
  set glare(value) {
    this._glareIntialized = true;
    this._refObject.glare = value;
  }
  get reflector() {
    if (!this._reflectorIntialized) {
      return undefined;
    }
    return this._refObject.reflector;
  }
  set reflector(value) {
    this._reflectorIntialized = true;
    this._refObject.reflector = value;
  }
  get contamination() {
    if (!this._contaminationIntialized) {
      return undefined;
    }
    return this._refObject.contamination;
  }
  set contamination(value) {
    this._contaminationIntialized = true;
    this._refObject.contamination = value;
  }
  get contamination_warning() {
    if (!this._contamination_warningIntialized) {
      return undefined;
    }
    return this._refObject.contamination_warning;
  }
  set contamination_warning(value) {
    this._contamination_warningIntialized = true;
    this._refObject.contamination_warning = value;
  }
  copyRefObject(refObject) {
    this._refObject = new ScanPointRefStruct(refObject.toObject());
    this._angleIntialized = true;
    this._distanceIntialized = true;
    this._reflectivityIntialized = true;
    this._validIntialized = true;
    this._infiniteIntialized = true;
    this._glareIntialized = true;
    this._reflectorIntialized = true;
    this._contaminationIntialized = true;
    this._contamination_warningIntialized = true;
  }
  copy(other) {
    this._refObject = new ScanPointRefStruct(other._refObject.toObject());
    this._angleIntialized = true;
    this._distanceIntialized = true;
    this._reflectivityIntialized = true;
    this._validIntialized = true;
    this._infiniteIntialized = true;
    this._glareIntialized = true;
    this._reflectorIntialized = true;
    this._contaminationIntialized = true;
    this._contamination_warningIntialized = true;
  }
  static get classType() {
    return ScanPointWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"angle","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float32","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"distance","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint16","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"reflectivity","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"valid","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"infinite","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"glare","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"reflector","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"contamination","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"contamination_warning","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"bool","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"sick_safetyscanners2_interfaces","type":"ScanPoint","stringUpperBound":null,"isPrimitiveType":false},"msgName":"ScanPoint"};
  }
  hasMember(name) {
    let memberNames = ["angle","distance","reflectivity","valid","infinite","glare","reflector","contamination","contamination_warning"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class ScanPointArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof ScanPointWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new ScanPointWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to ScanPointArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to ScanPointArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new ScanPointRefArray(size);
    this._refObject = new ScanPointRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new ScanPointWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof ScanPointArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "ScanPointArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      ScanPointWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return ScanPointWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return ScanPointArrayWrapper;
  }
}
module.exports = ScanPointWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "angle",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float32",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "distance",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint16",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "reflectivity",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "valid",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "infinite",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "glare",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "reflector",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "contamination",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "contamination_warning",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "bool",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "sick_safetyscanners2_interfaces",
    "type": "ScanPoint",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "ScanPoint"
}
*/
