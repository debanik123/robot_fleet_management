// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const FieldWrapper = require('../../generated/sick_safetyscanners2_interfaces/sick_safetyscanners2_interfaces__msg__Field.js');
const StringWrapper = require('../../generated/std_msgs/std_msgs__msg__String.js');
const MonitoringCaseWrapper = require('../../generated/sick_safetyscanners2_interfaces/sick_safetyscanners2_interfaces__msg__MonitoringCase.js');
const FieldData_ResponseRefStruct = StructType({
  fields: FieldWrapper.refObjectArrayType,
  device_name: primitiveTypes.string,
  monitoring_cases: MonitoringCaseWrapper.refObjectArrayType,
});
const FieldData_ResponseRefArray = ArrayType(FieldData_ResponseRefStruct);
const FieldData_ResponseRefStructArray = StructType({
  data: FieldData_ResponseRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class FieldData_ResponseWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new FieldData_ResponseRefStruct(other._refObject.toObject());
      this._wrapperFields.fields = FieldWrapper.createArray();
      this._wrapperFields.fields.copy(other._wrapperFields.fields);
      this._device_nameIntialized = true;
      this._wrapperFields.device_name =  new StringWrapper(other._wrapperFields.device_name);
      this._wrapperFields.monitoring_cases = MonitoringCaseWrapper.createArray();
      this._wrapperFields.monitoring_cases.copy(other._wrapperFields.monitoring_cases);
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new FieldData_ResponseRefStruct();
    this._wrapperFields.fields = FieldWrapper.createArray();
    this._device_nameIntialized = false;
    this._wrapperFields.device_name = new StringWrapper();
    this._wrapperFields.monitoring_cases = MonitoringCaseWrapper.createArray();
  }
  static createFromRefObject(refObject) {
    let self = new FieldData_ResponseWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new FieldData_ResponseArrayWrapper;
  }
  static get ArrayType() {
    return FieldData_ResponseArrayWrapper;
  }
  static get refObjectArrayType() {
    return FieldData_ResponseRefStructArray
  }
  static get refObjectType() {
    return FieldData_ResponseRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
      if (checkConsistency && !this._device_nameIntialized) {
        throw new TypeError('Invalid argument: device_name in FieldData_Response');
      }
    this._wrapperFields.fields.freeze(own, checkConsistency);
    this._refObject.fields = this._wrapperFields.fields.refObject;
    if (own) {
      this._wrapperFields.device_name.freeze(own, checkConsistency);
    }
    this._refObject.device_name = this._wrapperFields.device_name.refObject;
    this._wrapperFields.monitoring_cases.freeze(own, checkConsistency);
    this._refObject.monitoring_cases = this._wrapperFields.monitoring_cases.refObject;
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._wrapperFields.fields.copyRefObject(refObject.fields);
    this._device_nameIntialized = true;
    this._wrapperFields.device_name.data = refObject.device_name.data;
    this._wrapperFields.monitoring_cases.copyRefObject(refObject.monitoring_cases);
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    if (refObject.fields.size != 0) {
      FieldWrapper.ArrayType.freeArray(refObject.fields);
      if (FieldWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.fields, FieldWrapper.refObjectArrayType, 'data');
      }
    }
    StringWrapper.freeStruct(refObject.device_name);
    if (refObject.monitoring_cases.size != 0) {
      MonitoringCaseWrapper.ArrayType.freeArray(refObject.monitoring_cases);
      if (MonitoringCaseWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.monitoring_cases, MonitoringCaseWrapper.refObjectArrayType, 'data');
      }
    }
  }
  static destoryRawROS(msg) {
    FieldData_ResponseWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'sick_safetyscanners2_interfaces', subFolder: 'srv', interfaceName: 'FieldData_Response'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get fields() {
    return this._wrapperFields.fields;
  }
  set fields(value) {
    this._wrapperFields.fields.fill(value);
  }
  get device_name() {
    if (!this._device_nameIntialized) {
      return undefined;
    }
    return this._wrapperFields.device_name.data;
  }
  set device_name(value) {
    this._device_nameIntialized = true;
    this._wrapperFields.device_name.data = value;
  }
  get monitoring_cases() {
    return this._wrapperFields.monitoring_cases;
  }
  set monitoring_cases(value) {
    this._wrapperFields.monitoring_cases.fill(value);
  }
  copyRefObject(refObject) {
    this._refObject = new FieldData_ResponseRefStruct(refObject.toObject());
    this._wrapperFields.fields.copyRefObject(this._refObject.fields);
    this._device_nameIntialized = true;
    this._wrapperFields.device_name.copyRefObject(this._refObject.device_name);
    this._wrapperFields.monitoring_cases.copyRefObject(this._refObject.monitoring_cases);
  }
  copy(other) {
    this._refObject = new FieldData_ResponseRefStruct(other._refObject.toObject());
    this._wrapperFields.fields.copy(other._wrapperFields.fields);
    this._device_nameIntialized = true;
    this._wrapperFields.device_name.copy(other._wrapperFields.device_name);
    this._wrapperFields.monitoring_cases.copy(other._wrapperFields.monitoring_cases);
  }
  static get classType() {
    return FieldData_ResponseWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"fields","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":"sick_safetyscanners2_interfaces","type":"Field","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"device_name","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"monitoring_cases","type":{"isArray":true,"arraySize":null,"isUpperBound":false,"isDynamicArray":true,"isFixedSizeArray":null,"pkgName":"sick_safetyscanners2_interfaces","type":"MonitoringCase","stringUpperBound":null,"isPrimitiveType":false},"default_value":null}],"baseType":{"pkgName":"sick_safetyscanners2_interfaces","type":"FieldData_Response","stringUpperBound":null,"isPrimitiveType":false},"msgName":"FieldData_Response"};
  }
  hasMember(name) {
    let memberNames = ["fields","device_name","monitoring_cases"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class FieldData_ResponseArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof FieldData_ResponseWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new FieldData_ResponseWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to FieldData_ResponseArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to FieldData_ResponseArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new FieldData_ResponseRefArray(size);
    this._refObject = new FieldData_ResponseRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new FieldData_ResponseWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof FieldData_ResponseArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "FieldData_ResponseArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      FieldData_ResponseWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return FieldData_ResponseWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return FieldData_ResponseArrayWrapper;
  }
}
module.exports = FieldData_ResponseWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "fields",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": "sick_safetyscanners2_interfaces",
        "type": "Field",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "device_name",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "monitoring_cases",
      "type": {
        "isArray": true,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": true,
        "isFixedSizeArray": null,
        "pkgName": "sick_safetyscanners2_interfaces",
        "type": "MonitoringCase",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "sick_safetyscanners2_interfaces",
    "type": "FieldData_Response",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "FieldData_Response"
}
*/
