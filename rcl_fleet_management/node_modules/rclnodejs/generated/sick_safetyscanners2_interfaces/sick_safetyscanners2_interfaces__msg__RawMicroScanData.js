// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const DataHeaderWrapper = require('../../generated/sick_safetyscanners2_interfaces/sick_safetyscanners2_interfaces__msg__DataHeader.js');
const DerivedValuesWrapper = require('../../generated/sick_safetyscanners2_interfaces/sick_safetyscanners2_interfaces__msg__DerivedValues.js');
const GeneralSystemStateWrapper = require('../../generated/sick_safetyscanners2_interfaces/sick_safetyscanners2_interfaces__msg__GeneralSystemState.js');
const MeasurementDataWrapper = require('../../generated/sick_safetyscanners2_interfaces/sick_safetyscanners2_interfaces__msg__MeasurementData.js');
const IntrusionDataWrapper = require('../../generated/sick_safetyscanners2_interfaces/sick_safetyscanners2_interfaces__msg__IntrusionData.js');
const ApplicationDataWrapper = require('../../generated/sick_safetyscanners2_interfaces/sick_safetyscanners2_interfaces__msg__ApplicationData.js');
const RawMicroScanDataRefStruct = StructType({
  header: DataHeaderWrapper.refObjectType,
  derived_values: DerivedValuesWrapper.refObjectType,
  general_system_state: GeneralSystemStateWrapper.refObjectType,
  measurement_data: MeasurementDataWrapper.refObjectType,
  intrusion_data: IntrusionDataWrapper.refObjectType,
  application_data: ApplicationDataWrapper.refObjectType,
});
const RawMicroScanDataRefArray = ArrayType(RawMicroScanDataRefStruct);
const RawMicroScanDataRefStructArray = StructType({
  data: RawMicroScanDataRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class RawMicroScanDataWrapper {
  constructor(other, willCheckConsistency = false) {
    this._wrapperFields = {};
    this._willCheckConsistency = willCheckConsistency;
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new RawMicroScanDataRefStruct(other._refObject.toObject());
      this._wrapperFields.header =  new DataHeaderWrapper(other._wrapperFields.header);
      this._wrapperFields.derived_values =  new DerivedValuesWrapper(other._wrapperFields.derived_values);
      this._wrapperFields.general_system_state =  new GeneralSystemStateWrapper(other._wrapperFields.general_system_state);
      this._wrapperFields.measurement_data =  new MeasurementDataWrapper(other._wrapperFields.measurement_data);
      this._wrapperFields.intrusion_data =  new IntrusionDataWrapper(other._wrapperFields.intrusion_data);
      this._wrapperFields.application_data =  new ApplicationDataWrapper(other._wrapperFields.application_data);
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new RawMicroScanDataRefStruct();
    this._wrapperFields.header = new DataHeaderWrapper();
    this._wrapperFields.derived_values = new DerivedValuesWrapper();
    this._wrapperFields.general_system_state = new GeneralSystemStateWrapper();
    this._wrapperFields.measurement_data = new MeasurementDataWrapper();
    this._wrapperFields.intrusion_data = new IntrusionDataWrapper();
    this._wrapperFields.application_data = new ApplicationDataWrapper();
  }
  static createFromRefObject(refObject) {
    let self = new RawMicroScanDataWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new RawMicroScanDataArrayWrapper;
  }
  static get ArrayType() {
    return RawMicroScanDataArrayWrapper;
  }
  static get refObjectArrayType() {
    return RawMicroScanDataRefStructArray
  }
  static get refObjectType() {
    return RawMicroScanDataRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
    this._wrapperFields.header.freeze(own, checkConsistency);
    this._refObject.header = this._wrapperFields.header.refObject;
    this._wrapperFields.derived_values.freeze(own, checkConsistency);
    this._refObject.derived_values = this._wrapperFields.derived_values.refObject;
    this._wrapperFields.general_system_state.freeze(own, checkConsistency);
    this._refObject.general_system_state = this._wrapperFields.general_system_state.refObject;
    this._wrapperFields.measurement_data.freeze(own, checkConsistency);
    this._refObject.measurement_data = this._wrapperFields.measurement_data.refObject;
    this._wrapperFields.intrusion_data.freeze(own, checkConsistency);
    this._refObject.intrusion_data = this._wrapperFields.intrusion_data.refObject;
    this._wrapperFields.application_data.freeze(own, checkConsistency);
    this._refObject.application_data = this._wrapperFields.application_data.refObject;
  }
  serialize() {
    this.freeze(/*own=*/false, this._willCheckConsistency);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._wrapperFields.header.copyRefObject(refObject.header);
    this._wrapperFields.derived_values.copyRefObject(refObject.derived_values);
    this._wrapperFields.general_system_state.copyRefObject(refObject.general_system_state);
    this._wrapperFields.measurement_data.copyRefObject(refObject.measurement_data);
    this._wrapperFields.intrusion_data.copyRefObject(refObject.intrusion_data);
    this._wrapperFields.application_data.copyRefObject(refObject.application_data);
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    DataHeaderWrapper.freeStruct(refObject.header);
    DerivedValuesWrapper.freeStruct(refObject.derived_values);
    GeneralSystemStateWrapper.freeStruct(refObject.general_system_state);
    MeasurementDataWrapper.freeStruct(refObject.measurement_data);
    IntrusionDataWrapper.freeStruct(refObject.intrusion_data);
    ApplicationDataWrapper.freeStruct(refObject.application_data);
  }
  static destoryRawROS(msg) {
    RawMicroScanDataWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'sick_safetyscanners2_interfaces', subFolder: 'msg', interfaceName: 'RawMicroScanData'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get header() {
    return this._wrapperFields.header;
  }
  set header(value) {
    if (value instanceof DataHeaderWrapper) {
      this._wrapperFields.header.copy(value);
    } else {
      this._wrapperFields.header.copy(new DataHeaderWrapper(value));
    }
  }
  get derived_values() {
    return this._wrapperFields.derived_values;
  }
  set derived_values(value) {
    if (value instanceof DerivedValuesWrapper) {
      this._wrapperFields.derived_values.copy(value);
    } else {
      this._wrapperFields.derived_values.copy(new DerivedValuesWrapper(value));
    }
  }
  get general_system_state() {
    return this._wrapperFields.general_system_state;
  }
  set general_system_state(value) {
    if (value instanceof GeneralSystemStateWrapper) {
      this._wrapperFields.general_system_state.copy(value);
    } else {
      this._wrapperFields.general_system_state.copy(new GeneralSystemStateWrapper(value));
    }
  }
  get measurement_data() {
    return this._wrapperFields.measurement_data;
  }
  set measurement_data(value) {
    if (value instanceof MeasurementDataWrapper) {
      this._wrapperFields.measurement_data.copy(value);
    } else {
      this._wrapperFields.measurement_data.copy(new MeasurementDataWrapper(value));
    }
  }
  get intrusion_data() {
    return this._wrapperFields.intrusion_data;
  }
  set intrusion_data(value) {
    if (value instanceof IntrusionDataWrapper) {
      this._wrapperFields.intrusion_data.copy(value);
    } else {
      this._wrapperFields.intrusion_data.copy(new IntrusionDataWrapper(value));
    }
  }
  get application_data() {
    return this._wrapperFields.application_data;
  }
  set application_data(value) {
    if (value instanceof ApplicationDataWrapper) {
      this._wrapperFields.application_data.copy(value);
    } else {
      this._wrapperFields.application_data.copy(new ApplicationDataWrapper(value));
    }
  }
  copyRefObject(refObject) {
    this._refObject = new RawMicroScanDataRefStruct(refObject.toObject());
    this._wrapperFields.header.copyRefObject(this._refObject.header);
    this._wrapperFields.derived_values.copyRefObject(this._refObject.derived_values);
    this._wrapperFields.general_system_state.copyRefObject(this._refObject.general_system_state);
    this._wrapperFields.measurement_data.copyRefObject(this._refObject.measurement_data);
    this._wrapperFields.intrusion_data.copyRefObject(this._refObject.intrusion_data);
    this._wrapperFields.application_data.copyRefObject(this._refObject.application_data);
  }
  copy(other) {
    this._refObject = new RawMicroScanDataRefStruct(other._refObject.toObject());
    this._wrapperFields.header.copy(other._wrapperFields.header);
    this._wrapperFields.derived_values.copy(other._wrapperFields.derived_values);
    this._wrapperFields.general_system_state.copy(other._wrapperFields.general_system_state);
    this._wrapperFields.measurement_data.copy(other._wrapperFields.measurement_data);
    this._wrapperFields.intrusion_data.copy(other._wrapperFields.intrusion_data);
    this._wrapperFields.application_data.copy(other._wrapperFields.application_data);
  }
  static get classType() {
    return RawMicroScanDataWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"header","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"sick_safetyscanners2_interfaces","type":"DataHeader","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"derived_values","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"sick_safetyscanners2_interfaces","type":"DerivedValues","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"general_system_state","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"sick_safetyscanners2_interfaces","type":"GeneralSystemState","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"measurement_data","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"sick_safetyscanners2_interfaces","type":"MeasurementData","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"intrusion_data","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"sick_safetyscanners2_interfaces","type":"IntrusionData","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"application_data","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"sick_safetyscanners2_interfaces","type":"ApplicationData","stringUpperBound":null,"isPrimitiveType":false},"default_value":null}],"baseType":{"pkgName":"sick_safetyscanners2_interfaces","type":"RawMicroScanData","stringUpperBound":null,"isPrimitiveType":false},"msgName":"RawMicroScanData"};
  }
  hasMember(name) {
    let memberNames = ["header","derived_values","general_system_state","measurement_data","intrusion_data","application_data"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class RawMicroScanDataArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof RawMicroScanDataWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new RawMicroScanDataWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to RawMicroScanDataArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to RawMicroScanDataArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new RawMicroScanDataRefArray(size);
    this._refObject = new RawMicroScanDataRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new RawMicroScanDataWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof RawMicroScanDataArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "RawMicroScanDataArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      RawMicroScanDataWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return RawMicroScanDataWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return RawMicroScanDataArrayWrapper;
  }
}
module.exports = RawMicroScanDataWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "header",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "sick_safetyscanners2_interfaces",
        "type": "DataHeader",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "derived_values",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "sick_safetyscanners2_interfaces",
        "type": "DerivedValues",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "general_system_state",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "sick_safetyscanners2_interfaces",
        "type": "GeneralSystemState",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "measurement_data",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "sick_safetyscanners2_interfaces",
        "type": "MeasurementData",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "intrusion_data",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "sick_safetyscanners2_interfaces",
        "type": "IntrusionData",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "application_data",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "sick_safetyscanners2_interfaces",
        "type": "ApplicationData",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "sick_safetyscanners2_interfaces",
    "type": "RawMicroScanData",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "RawMicroScanData"
}
*/
